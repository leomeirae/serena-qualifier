#!/bin/bash

# Script para atualiza√ß√£o do Kestra no Coolify
# Vers√£o: v0.23.6

echo "üöÄ Iniciando atualiza√ß√£o do Kestra para v0.23.6..."

# Fun√ß√£o para verificar se o comando foi executado com sucesso
check_success() {
    if [ $? -eq 0 ]; then
        echo "‚úÖ $1"
    else
        echo "‚ùå Erro em: $1"
        exit 1
    fi
}

# 1. Verificar se estamos na pasta correta
if [ ! -f "docker-compose-coolify.yml" ]; then
    echo "‚ùå Arquivo docker-compose-coolify.yml n√£o encontrado!"
    echo "Execute este script na pasta do projeto."
    exit 1
fi

# 2. Criar backup dos dados atuais
echo "üì¶ Criando backup dos dados atuais..."
BACKUP_DIR="backup-kestra-$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"

# Copiar arquivo de configura√ß√£o atual
cp docker-compose-coolify.yml "$BACKUP_DIR/docker-compose-coolify.yml.backup"
check_success "Backup do docker-compose criado"

# 3. Verificar se a nova vers√£o est√° dispon√≠vel
echo "üîç Verificando disponibilidade da imagem v0.23.6..."
docker pull kestra/kestra:v0.23.6-full
check_success "Download da nova imagem do Kestra"

# 4. Parar os servi√ßos gradualmente
echo "‚è∏Ô∏è Parando servi√ßos dependentes..."
echo "IMPORTANTE: Execute os seguintes comandos no Coolify:"
echo ""
echo "1. No painel do Coolify, v√° para o seu projeto"
echo "2. Pare os servi√ßos na seguinte ordem:"
echo "   - api-principal (primeiro)"
echo "   - webhook-service (segundo)"
echo "   - kestra (terceiro)"
echo "   - postgres e redis (por √∫ltimo)"
echo ""
echo "3. Ap√≥s parar todos os servi√ßos, execute:"
echo "   git pull origin main"
echo "   (ou fa√ßa o redeploy no Coolify)"
echo ""

# 5. Verificar configura√ß√µes
echo "üîß Verificando configura√ß√µes atualizadas..."
echo "Altera√ß√µes feitas:"
echo "- Imagem atualizada: kestra/kestra:v0.23.6-full"
echo "- JAVA_OPTS otimizado para melhor performance"
echo "- Configura√ß√µes mantidas compat√≠veis"
echo ""

# 6. Instru√ß√µes para restart
echo "üîÑ Instru√ß√µes para restart no Coolify:"
echo "1. Inicie os servi√ßos na seguinte ordem:"
echo "   - postgres (primeiro)"
echo "   - redis (segundo)"
echo "   - kestra (terceiro - aguarde ficar healthy)"
echo "   - webhook-service (quarto)"
echo "   - api-principal (por √∫ltimo)"
echo ""
echo "2. Verificar logs de cada servi√ßo para garantir que iniciaram corretamente"
echo "3. Testar a interface do Kestra em: https://kestra.darwinai.com.br"
echo ""

# 7. Testes de valida√ß√£o
echo "‚úÖ Testes de valida√ß√£o ap√≥s update:"
echo "1. Acesse https://kestra.darwinai.com.br"
echo "2. Verifique se os 3 workflows est√£o funcionando:"
echo "   - 2_ai_conversation_flow.yml"
echo "   - 3_ai_conversation_flow_simplified.yml"
echo "   - 4_ai_conversation_flow_advanced.yml"
echo "3. Teste uma execu√ß√£o de webhook"
echo "4. Verifique os logs para erros"
echo ""

# 8. Rollback se necess√°rio
echo "üîÑ Plano de rollback (se necess√°rio):"
echo "1. Restaurar: cp $BACKUP_DIR/docker-compose-coolify.yml.backup docker-compose-coolify.yml"
echo "2. Fazer redeploy no Coolify"
echo "3. Reiniciar servi√ßos na ordem correta"
echo ""

echo "üéâ Atualiza√ß√£o preparada! Agora execute as etapas no Coolify."
echo "üìÅ Backup salvo em: $BACKUP_DIR" 