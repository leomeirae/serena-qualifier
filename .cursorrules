### serena-qualifier Cursor AI Rules
# Arquivo de regras para o projeto "serena-qualifier"
# Local: `.cursor/rules/serena-qualifier.rules.yaml`

# --------------------------------------------------------------------------------
# Regra 1: Contexto Geral do Projeto (@workspace)
# --------------------------------------------------------------------------------
- rule:
    for: "@workspace"
    type: "general_context"
    content: |
      Nome do Projeto: serena-qualifier
      Objetivo: Sistema automatizado para captura, qualificação e persistência de leads para a Serena Energia.
      Persona da IA: "Sílvia", representante virtual simpática e bem-humorada.
      Principais Tecnologias:
        • Orquestração: Kestra (YAML em `kestra/workflows`).
        • IA: LangChain com modelo `gpt-4o-mini`. Orquestrador: `scripts/agent_orchestrator.py`.
        • Banco de Dados: Supabase (PostgreSQL). Salvamento em `scripts/save_lead_to_supabase.py`.
        • Comunicação: WhatsApp Business API via `scripts/send_whatsapp_template.py`.
        • API Externa: Serena Energia (`scripts/serena_api.py`).

# --------------------------------------------------------------------------------
# Regra 2: Persona e Estilo Conversacional (persona_guidelines)
# --------------------------------------------------------------------------------
- rule:
    for: "@workspace"
    type: "persona_guidelines"
    content: |
      • Silvia deve usar tom simpático e informal-profissional ao falar com leads.
      • Frases curtas, diretas, com humor leve quando apropriado.
      • Em interações técnicas ou internas, adotar tom neutro e profissional.

# --------------------------------------------------------------------------------
# Regra 3: Fonte Canônica de Informação (source_of_truth)
# --------------------------------------------------------------------------------
- rule:
    for: "MASTER_GUIDE_FINAL.md"
    type: "source_of_truth"
    content: |
      Este é o documento definitivo do projeto: consulte sempre para arquitetura, fluxos, modelo de dados e decisões de design.

# --------------------------------------------------------------------------------
# Regra 4: Padrões de Código Python (coding_style)
# --------------------------------------------------------------------------------
- rule:
    for: "python"
    type: "coding_style"
    content: |
      Logging:
        • Use `logging`, não `print()`.
        • Formato padrão: "[MÓDULO] [FUNÇÃO] - mensagem".
          Ex: `logger.info("[send_whatsapp_template] [enviar_template] - sucesso.")`
      Tipagem:
        • Use type hints consistentes para funções e variáveis.
          Ex: `def fn(nome: str, dados: Optional[Dict[str, Any]]) -> bool:`
      Docstrings:
        • Todas as funções públicas, classes e módulos devem ter docstrings no formato Google.
      Variáveis de Ambiente:
        • Nunca hardcode tokens ou credenciais.
        • Use `os.getenv()` ou `load_dotenv()` e masqueie valores em logs.
      Tratamento de Erros:
        • Blocos `try...except` robustos em I/O e processamento de dados externos.
      Estrutura de Arquivo:
        1. Importações
        2. Configuração de logging
        3. Configs/variáveis globais
        4. Funções utilitárias internas
        5. Classes principais
        6. Funções públicas
        7. Bloco `if __name__ == "__main__":`

# --------------------------------------------------------------------------------
# Regra 5: Interação com Supabase e API Serena (api_client_usage)
# --------------------------------------------------------------------------------
- rule:
    for: "scripts/serena_api.py"
    type: "api_client_usage"
    content: |
      • Use a classe `SerenaAPI` para autenticação e chamadas.
      • Métodos: `get_plans(cidade: str, estado: str)` retorna planos de energia.
      • Tokens e URLs são carregados do ambiente (`SERENA_API_TOKEN`, `SERENA_API_BASE_URL`).
- rule:
    for: "scripts/save_lead_to_supabase.py"
    type: "database_interaction"
    content: |
      • Use `INSERT ... ON CONFLICT DO UPDATE` para evitar duplicatas de `phone_number`.
      • Centralize lógica de conexão em um helper reutilizável.

# --------------------------------------------------------------------------------
# Regra 6: Definição de Ferramentas LangChain (langchain_tool_definition)
# --------------------------------------------------------------------------------
- rule:
    for: "**/agent_tools/**/*.py"
    type: "langchain_tool_definition"
    content: |
      1. Use `@tool` da `langchain.tools`.
      2. Docstring detalhada: finalidade, formato de entrada e saída.
      3. Registre a ferramenta em `tools` no `agent_orchestrator.py`.
      Ex:
      ```python
      @tool
def buscar_planos(cidade_estado: str) -> str:
          """
          Busca planos de energia para 'cidade, estado'.
          Retorna lista de planos ou mensagem de indisponibilidade.
          """
          ...
      ```

# --------------------------------------------------------------------------------
# Regra 7: Boas Práticas em Workflows Kestra (kestra_workflow_best_practices)
# --------------------------------------------------------------------------------
- rule:
    for: "**/*.yml"
    type: "kestra_workflow_best_practices"
    content: |
      • Cada tarefa crítica deve incluir verificação de sucesso (`runIf` ou validação de outputs).
      • Nunca use outputs sem sanitização ou fallback.
      • Documente propósito de cada fluxo no cabeçalho YAML.

