version: '3.8'

# Âncora YAML para a configuração do Kestra, evitando repetição
x-kestra-config: &kestra-config
  KESTRA_CONFIGURATION: |
    datasources:
      postgres:
        url: jdbc:postgresql://postgres:5432/kestra
        driverClassName: org.postgresql.Driver
        username: kestra
        password: kestra123
    kestra:
      repository:
        type: postgres
      storage:
        type: local
        local:
          basePath: "/app/storage"
      queue:
        type: postgres
      variables:
        env-vars-prefix: ""  # Empty prefix to expose all environment variables directly
    micronaut:
      io:
        watch:
          enabled: true
          paths:
            - /app/flows
      server:
        cors:
          enabled: true
          configurations:
            web:
              allowed-origins:
                - "http://localhost:3000"
                - "http://127.0.0.1:3000"
              allowed-methods:
                - GET
                - POST
                - PUT
                - DELETE
                - OPTIONS
              allowed-headers:
                - "*"
              allow-credentials: true

networks:
  kestra-network:
    driver: bridge

volumes:
  postgres_data:
  kestra_data:
  kestra_logs:

services:
  postgres:
    image: postgres:15-alpine
    container_name: kestra-postgres-minimal
    environment:
      POSTGRES_DB: kestra
      POSTGRES_USER: kestra
      POSTGRES_PASSWORD: kestra123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - kestra-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kestra -d kestra"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: kestra-redis-minimal
    command: redis-server --appendonly yes
    networks:
      - kestra-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 1. NOVO SERVIÇO: APENAS PARA MIGRAÇÃO DO BANCO DE DADOS
  # Este serviço executa a migração e termina.
  kestra-migration:
    image: kestra/kestra:latest-full # Usar imagem 'full' garante que todos os drivers JDBC estejam presentes
    command: ["database", "migrate"]
    user: root  # Needed for Docker socket access
    env_file:
      - .env
    environment:
      <<: *kestra-config # Reutiliza a configuração do Kestra
    networks:
      - kestra-network
    depends_on:
      postgres:
        condition: service_healthy

  # 2. SERVIÇO KESTRA MODIFICADO
  kestra-minimal:
    image: kestra/kestra:latest-full # Usar imagem 'full' é recomendado
    container_name: kestra-minimal
    command: ["server", "standalone"]
    user: root  # Needed for Docker socket access
    ports:
      - "8081:8080"
    volumes:
      # Caminho padrão para o Docker socket, mais portável que um caminho de usuário específico
      - /var/run/docker.sock:/var/run/docker.sock 
      - ./kestra/workflows:/app/flows
    env_file:
      - .env
    environment:
      <<: *kestra-config # Reutiliza a configuração do Kestra
      # Configurações do Kestra
      KESTRA_LOG_LEVEL: DEBUG
      # Plugins essenciais (a sintaxe parece correta)
      KESTRA_PLUGINS: |
        io.kestra.plugin:plugin-docker:[0.22,0.23)
        io.kestra.plugin:plugin-script-python:[0.22,0.23)
        io.kestra.plugin:plugin-fs:[0.22,0.23)
      # JVM e Timezone (estavam corretos)
      JAVA_OPTS: "-server -XX:MaxRAMPercentage=50.0 -Xms256m -Xmx1g"
      TZ: America/Sao_Paulo
    
    networks:
      - kestra-network
    
    # 3. ALTERAÇÃO CRÍTICA: AGORA DEPENDE DA MIGRAÇÃO
    depends_on:
      - kestra-migration
      - redis
    
    restart: always
    
    # Healthcheck mais robusto que não depende da existência de flows
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/ui/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # 3. NOVO SERVIÇO: WEBHOOK WHATSAPP → KESTRA
  whatsapp-webhook:
    build:
      context: .
      dockerfile: Dockerfile.webhook
    container_name: whatsapp-webhook-service
    ports:
      - "8000:8000"  # Porta para receber webhooks do WhatsApp
    env_file:
      - .env
    environment:
      # Configurações específicas do webhook
      WHATSAPP_VERIFY_TOKEN: "serena_webhook_verify_token"
      KESTRA_API_URL: "http://kestra-minimal:8080"
      PYTHONPATH: "/app"
    volumes:
      - ./:/app
    networks:
      - kestra-network
    depends_on:
      kestra-minimal:
        condition: service_healthy
    restart: unless-stopped
    command: ["uvicorn", "webhook_service:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s