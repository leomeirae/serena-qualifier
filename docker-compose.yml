networks:
  kestra-network:
    driver: bridge

volumes:
  postgres_data:
  kestra_data:
  kestra_logs:

services:
  postgres:
    image: postgres:15-alpine
    container_name: kestra-postgres
    environment:
      POSTGRES_DB: kestra
      POSTGRES_USER: kestra
      POSTGRES_PASSWORD: kestra123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - kestra-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kestra -d kestra"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: kestra-redis
    command: redis-server --appendonly yes
    networks:
      - kestra-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  kestra:
    image: kestra/kestra:latest
    container_name: kestra
    command: ["server", "local"]
    ports:
      - "8080:8080"
    volumes:
      # Docker socket para task runners
      - /var/run/docker.sock:/var/run/docker.sock
      # Workflows locais (opcional)
      - ./kestra/workflows:/app/workflows:ro
    environment:
      # Define o tipo de banco de dados e fila
      KESTRA_REPOSITORY_TYPE: postgres
      KESTRA_QUEUE_TYPE: postgres

      # Fornece as credenciais para o banco de dados "default"
      KESTRA_DATASOURCES_DEFAULT_URL: jdbc:postgresql://postgres:5432/kestra
      KESTRA_DATASOURCES_DEFAULT_USERNAME: kestra
      KESTRA_DATASOURCES_DEFAULT_PASSWORD: kestra123
      
      # JVM Settings
      JAVA_OPTS: "-server -XX:MaxRAMPercentage=75.0"
      
      # Timezone
      TZ: America/Recife
    
    networks:
      - kestra-network
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    restart: always
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Elasticsearch (opcional para logs avan√ßados)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: kestra-elasticsearch
    environment:
      - node.name=kestra-es
      - cluster.name=kestra-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - kestra-network
    restart: unless-stopped
    profiles:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # WhatsApp Service (nosso servidor)
  whatsapp-service:
    build: 
      context: .
      dockerfile: Dockerfile.whatsapp
    container_name: whatsapp-service
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=America/Recife
      - WHATSAPP_API_TOKEN=EAAPR0FG5sq8BO13QWTDq2WvevqofbxmFS9BCZBfZBmjq8slQszcKXhg5yfGiIxTBCP87Izz1OETDvDxWXPlpyFWuzqri9TXYlXrZAAsZCUMKZASDGZCmnOzPMZByO6pX24ABdZBAykqx7h72xn5cRbofG3qONhrMnx9WxmZAs7XwQtWPIaQGJZBJZCmuR0JmRV4KdLwZAwZDZD
      - WHATSAPP_PHONE_NUMBER_ID=599096403294262
      - WHATSAPP_WELCOME_TEMPLATE_NAME=prosseguir_com_solicitacao
    networks:
      - kestra-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - whatsapp 