import os
import argparse
import json
from dotenv import load_dotenv

# --- Importa√ß√µes Essenciais do LangChain ---
from langchain_openai import ChatOpenAI
from langchain.agents import AgentExecutor, create_openai_tools_agent
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_community.chat_message_histories import RedisChatMessageHistory
from langchain_core.runnables.history import RunnableWithMessageHistory

# --- Importar Ferramentas Espec√≠ficas do Agente ---
from scripts.agent_tools.knowledge_base_tool import consultar_faq_serena
from scripts.agent_tools.serena_tools import (
    buscar_planos_de_energia_por_localizacao,
    analisar_conta_de_energia_de_imagem,
)
from scripts.agent_tools.supabase_agent_tools import salvar_ou_atualizar_lead_silvia, consultar_dados_lead

# Carregar vari√°veis de ambiente (ex: OPENAI_API_KEY)
load_dotenv()

# --- PASSO 1: Montagem do Agente "S√≠lvia" ---

# 1.1 - Lista de ferramentas que o agente poder√° usar.
tools = [
    consultar_dados_lead,
    consultar_faq_serena,
    buscar_planos_de_energia_por_localizacao,
    analisar_conta_de_energia_de_imagem,
    salvar_ou_atualizar_lead_silvia
]

# 1.2 - O "c√©rebro" do agente: o modelo de linguagem.
llm = ChatOpenAI(model="gpt-4o-mini", temperature=0.7)

# 1.3 - O prompt do agente, definindo a persona e as entradas.
# O conte√∫do do FAQ_INTERNO_TRAINING.md √© inserido aqui.
system_prompt = """
# Persona
Voc√™ √© a S√≠lvia, uma especialista em energia da Serena, e sua miss√£o √© ser a melhor SDR (Sales Development Representative) virtual do mundo. Sua comunica√ß√£o √© clara, emp√°tica, amig√°vel e, acima de tudo, humana. Voc√™ guia o lead por uma jornada, nunca despeja informa√ß√µes. Voc√™ usa emojis (üòä, ‚úÖ, üí∞, ‚ö°) para tornar a conversa mais leve e formata√ß√£o em negrito (*texto*) para destacar informa√ß√µes chave.

# Contexto do Lead (Informa√ß√µes Recebidas)
- **Nome do Lead**: {lead_name}
- **Cidade do Lead**: {lead_city}

# Guia da Conversa (Sua B√∫ssola)
1.  **Acolhida e Confirma√ß√£o (Primeira Mensagem)**: Quando o hist√≥rico da conversa estiver vazio, sua primeira a√ß√£o √© usar o *Nome* e a *Cidade* do lead (fornecidos no contexto) para uma sauda√ß√£o calorosa e para confirmar a cidade, engajando o lead em uma conversa. Ex: "Ol√°, *{lead_name}*! Sou a S√≠lvia da Serena Energia. üòä Vi que voc√™ √© de *{lead_city}*, certo?". Se o nome ou a cidade n√£o forem fornecidos, use a ferramenta `consultar_dados_lead` para busc√°-los.

2.  **Construa o Caso, N√£o Apenas Apresente**: Ap√≥s a confirma√ß√£o da cidade, antes de pedir qualquer coisa, agregue valor. Informe o principal benef√≠cio da Serena naquela regi√£o. Ex: "√ìtimo! Em *{lead_city}*, temos ajudado muitas fam√≠lias a economizar at√© *21% na conta de luz*, e o melhor: sem nenhuma obra ou instala√ß√£o."

3.  **Uma Pergunta de Cada Vez**: Mantenha o fluxo simples. Ap√≥s agregar valor, o pr√≥ximo passo l√≥gico √© entender o consumo do lead.

4.  **Pe√ßa a Conta de Energia com Contexto**: Justifique o pedido de forma clara e ben√©fica para o lead. Diga: "Para eu conseguir te dar uma *simula√ß√£o exata da sua economia*, voc√™ poderia me enviar uma foto da sua √∫ltima conta de luz, por favor? Assim, vejo seu consumo e te apresento o plano perfeito."

5.  **Uso Inteligente das Ferramentas**:
    * `consultar_dados_lead`: Use *apenas se* o nome ou a cidade n√£o forem fornecidos no contexto inicial.
    * `buscar_planos_de_energia_por_localizacao`: Use *apenas depois* que o lead confirmar a localiza√ß√£o. NUNCA liste todos os planos. Use a ferramenta para entender as op√ß√µes e ent√£o recomende a *melhor* baseada no perfil do lead (ap√≥s analisar a conta).
    * `consultar_faq_serena`: Sua base de conhecimento para responder d√∫vidas gerais como "o que √© a Serena?" ou "preciso instalar placas?". Responda de forma resumida e natural, n√£o cole a resposta inteira da ferramenta.

6.  **Apresenta√ß√£o dos Planos (O Gran Finale)**: Ap√≥s analisar a conta, n√£o liste os planos. Recomende o *plano ideal* para aquele consumo. Apresente os outros apenas se o lead solicitar.

7.  **Priorize a Conversa**: A informa√ß√£o confirmada pelo usu√°rio durante o di√°logo (como a cidade) √© a *fonte da verdade*. Use os dados do contexto para iniciar ou enriquecer a conversa, mas se o usu√°rio confirmar algo diferente, a confirma√ß√£o dele prevalece.
"""

prompt = ChatPromptTemplate.from_messages([
    ("system", system_prompt),
    MessagesPlaceholder(variable_name="chat_history"),
    ("user", "{input}"),
    MessagesPlaceholder(variable_name="agent_scratchpad"),
])

# 1.4 - Cria o agente, unindo o LLM, o prompt e as ferramentas.
agent = create_openai_tools_agent(llm, tools, prompt)

# 1.5 - Cria o executor do agente.
agent_executor = AgentExecutor(
    agent=agent, 
    tools=tools, 
    verbose=True,
    handle_parsing_errors=True,
    max_iterations=10
)


# --- PASSO 2: Adicionar Mem√≥ria de Conversa (com Persist√™ncia no Redis) ---

# 2.1 - Obtenha a URL do Redis das vari√°veis de ambiente.
REDIS_URL = os.getenv("REDIS_URL", "redis://redis:6379/0")

# 2.2 - Fun√ß√£o que agora usa o Redis para buscar ou criar o hist√≥rico.
def get_session_history(session_id: str) -> RedisChatMessageHistory:
    """
    Recupera o hist√≥rico da conversa do Redis. Cada sess√£o (n√∫mero de telefone)
    ter√° sua pr√≥pria chave no Redis.
    """
    return RedisChatMessageHistory(session_id, url=REDIS_URL)

# 2.3 - Envolve o executor do agente com o gerenciador de hist√≥rico.
# Esta √© a cadeia final, pronta para ser usada.
agent_with_chat_history = RunnableWithMessageHistory(
    agent_executor,
    get_session_history,
    input_messages_key="input",
    history_messages_key="chat_history",
)

# --- PASSO 3: Fun√ß√£o Principal de Execu√ß√£o ---

def handle_agent_invocation(phone_number: str, user_message: str, lead_city: str = "", lead_name: str = "", image_url: str | None = None):
    """
    Recebe a mensagem limpa do usu√°rio, prepara a entrada e invoca o agente com mem√≥ria.
    """
    import logging
    logger = logging.getLogger(__name__)
    
    # L√≥gica de entrada simplificada
    if image_url:
        input_data = f"O usu√°rio {phone_number} enviou esta imagem para an√°lise: {image_url}. Mensagem adicional: {user_message}"
    else:
        # A mensagem j√° √© o conte√∫do real, seja texto ou o t√≠tulo de um bot√£o.
        input_data = user_message

    config = {"configurable": {"session_id": phone_number}}

    try:
        logger.info(f"ü§ñ Invocando agente para {phone_number} com input: '{input_data[:100]}...'")
        
        # Formata o prompt do sistema com os dados do lead
        formatted_prompt = prompt.partial(lead_name=lead_name, lead_city=lead_city)
        
        # Recria o agente com o prompt formatado
        agent = create_openai_tools_agent(llm, tools, formatted_prompt)
        agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True, handle_parsing_errors=True, max_iterations=10)
        agent_with_chat_history = RunnableWithMessageHistory(
            agent_executor,
            get_session_history,
            input_messages_key="input",
            history_messages_key="chat_history",
        )

        response = agent_with_chat_history.invoke(
            {"input": input_data},
            config=config
        )
        
        output = response.get("output", "N√£o consegui processar sua solicita√ß√£o.")
        return {"response": output}
    except Exception as e:
        logger.error(f"‚ùå Erro ao invocar agente para {phone_number}: {str(e)}")
        return {"response": f"Desculpe, tive um problema t√©cnico. Por favor, tente novamente. Erro: {str(e)}"}


# --- PASSO 4: Ponto de Entrada para o Script (para testes) ---

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Orquestrador do Agente S√≠lvia.')
    parser.add_argument('--phone_number', type=str, required=True, help='N√∫mero de telefone do usu√°rio (ID da sess√£o).')
    parser.add_argument('--message', type=str, required=True, help='Mensagem do usu√°rio.')
    parser.add_argument('--lead_city', type=str, default="", help='Cidade do lead (opcional).')
    parser.add_argument('--lead_name', type=str, default="", help='Nome do lead (opcional).')
    parser.add_argument('--image_url', type=str, help='URL da imagem (opcional).')
    
    args = parser.parse_args()

    # Executa a l√≥gica do agente
    result = handle_agent_invocation(args.phone_number, args.message, args.lead_city, args.lead_name, args.image_url)
    
    # Imprime o resultado final em formato JSON para ser consumido pelo Kestra
    print(json.dumps(result)) 