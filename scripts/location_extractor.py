#!/usr/bin/env python3
"""
Location Extractor Module

Este m√≥dulo cont√©m a l√≥gica para extrair localiza√ß√£o (cidade/estado) das mensagens
dos leads e gerar prompts personalizados baseados na localiza√ß√£o.

Author: Serena-Coder AI Agent
Version: 1.0.0 - Refatora√ß√£o para modulariza√ß√£o
Created: 2025-01-17
"""

import re
import logging
from typing import Optional, Tuple, List, Dict, Any

# Configure logging
logger = logging.getLogger(__name__)


class LocationExtractor:
    """
    Classe respons√°vel pela extra√ß√£o de localiza√ß√£o das mensagens dos leads
    e gera√ß√£o de prompts personalizados.
    """
    
    def __init__(self):
        """Inicializa o extrator de localiza√ß√£o."""
        # Lista de estados v√°lidos do Brasil
        self.valid_states = {
            'AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA',
            'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN',
            'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO'
        }
        
        # Dicion√°rio de cidades conhecidas com seus estados
        self.major_cities = {
            's√£o paulo': 'SP', 'rio de janeiro': 'RJ', 'belo horizonte': 'MG',
            'salvador': 'BA', 'bras√≠lia': 'DF', 'fortaleza': 'CE',
            'recife': 'PE', 'porto alegre': 'RS', 'manaus': 'AM',
            'curitiba': 'PR', 'goi√¢nia': 'GO', 'vit√≥ria': 'ES',
            'bel√©m': 'PA', 'guarulhos': 'SP', 'campinas': 'SP',
            'nova igua√ßu': 'RJ', 'macei√≥': 'AL', 's√£o lu√≠s': 'MA',
            'duque de caxias': 'RJ', 'natal': 'RN', 'teresina': 'PI',
            'campo grande': 'MS', 's√£o bernardo do campo': 'SP',
            'jo√£o pessoa': 'PB', 'santo andr√©': 'SP', 'osasco': 'SP'
        }
        
        # Padr√µes regex para extra√ß√£o de localiza√ß√£o
        self.location_patterns = [
            # Padr√£o: "moro em S√£o Paulo, SP" ou "vivo em Rio de Janeiro/RJ"
            r'(?i)(?:moro|vivo|estou|fico|resido)\s+em\s+([a-z√°√™√ß√µ√£√º√©\s]+?)[\s,\/\-]+([A-Z]{2})\b',
            # Padr√£o: "sou de S√£o Paulo, SP" (captura depois do "de")
            r'(?i)sou\s+de\s+([a-z√°√™√ß√µ√£√º√©\s]+?)[\s,\/\-]+([A-Z]{2})\b',
            # Padr√£o geral: "verbo cidade, estado"
            r'(?i)(?:moro|vivo|estou|fico|resido)\s+([a-z√°√™√ß√µ√£√º√©\s]+?)[\s,\/\-]+([A-Z]{2})\b',
            # Padr√£o: "S√£o Paulo - SP" ou "Belo Horizonte/MG"
            r'(?i)\b([a-z√°√™√ß√µ√£√º√©\s]{3,})[\s,\/\-]+([A-Z]{2})\b',
            # Padr√£o: "SP - S√£o Paulo" (estado primeiro)
            r'(?i)\b([A-Z]{2})[\s,\/\-]+([a-z√°√™√ß√µ√£√º√©\s]{3,})\b'
        ]
    
    def extract_location_from_message(self, message: str) -> Optional[Tuple[str, str]]:
        """
        Extrai cidade e estado de uma mensagem do lead.
        
        Args:
            message (str): Mensagem enviada pelo lead
            
        Returns:
            Optional[Tuple[str, str]]: (cidade, estado) ou None se n√£o encontrado
        """
        try:
            # Primeira tentativa: usar padr√µes regex
            for pattern in self.location_patterns:
                matches = re.findall(pattern, message)
                for match in matches:
                    part1, part2 = match[0].strip(), match[1].strip()
                    
                    # Determinar qual √© cidade e qual √© estado
                    if len(part1) == 2 and part1.upper() in self.valid_states:
                        # part1 √© estado, part2 √© cidade
                        state, city = part1.upper(), part2.title()
                    elif len(part2) == 2 and part2.upper() in self.valid_states:
                        # part2 √© estado, part1 √© cidade
                        city, state = part1.title(), part2.upper()
                    else:
                        continue  # N√£o conseguiu identificar estado v√°lido
                    
                    # Valida√ß√µes adicionais
                    if self._is_valid_city_name(city) and state in self.valid_states:
                        logger.info(f"‚úÖ Localiza√ß√£o extra√≠da: {city}/{state}")
                        return (city, state)
            
            # Segunda tentativa: buscar por cidades conhecidas
            result = self._extract_from_known_cities(message)
            if result:
                return result
            
            logger.info("‚ÑπÔ∏è Localiza√ß√£o n√£o identificada na mensagem")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao extrair localiza√ß√£o: {str(e)}")
            return None
    
    def _is_valid_city_name(self, city: str) -> bool:
        """
        Valida se o nome da cidade √© v√°lido.
        
        Args:
            city (str): Nome da cidade
            
        Returns:
            bool: True se v√°lido
        """
        return (
            len(city) >= 3 and 
            len(city) <= 50 and
            not any(word in city.lower() for word in ['conta', 'luz', 'energia', 'economizar', 'desconto'])
        )
    
    def _extract_from_known_cities(self, message: str) -> Optional[Tuple[str, str]]:
        """
        Tenta extrair localiza√ß√£o usando lista de cidades conhecidas.
        
        Args:
            message (str): Mensagem do lead
            
        Returns:
            Optional[Tuple[str, str]]: (cidade, estado) ou None
        """
        message_lower = message.lower()
        for city_lower, state in self.major_cities.items():
            # Busca por palavra completa da cidade
            if re.search(rf'\b{re.escape(city_lower)}\b', message_lower):
                city = city_lower.title()
                logger.info(f"‚úÖ Cidade conhecida identificada: {city}/{state}")
                return (city, state)
        return None
    
    def get_initial_response_prompt(self, lead_message: str) -> str:
        """
        Gera o prompt para a primeira resposta da IA ao lead.
        
        Args:
            lead_message (str): Mensagem enviada pelo lead
            
        Returns:
            str: Prompt formatado para a OpenAI
        """
        return f"""Voc√™ √© a Serena, assistente virtual da SRna Energia. Um lead interessado em economizar na conta de luz acabou de enviar a mensagem: "{lead_message}"

Sua resposta deve:
1. Agradecer o interesse em economizar com a Serena Energia
2. Explicar brevemente que a Serena oferece energia solar sem instala√ß√£o
3. Solicitar a cidade e estado do lead para verificar disponibilidade
4. Ser amig√°vel, clara e concisa (m√°ximo 2 par√°grafos)
5. Usar emojis moderadamente para humanizar

Exemplo de tom: "Ol√°! üòä Que bom que voc√™ tem interesse em economizar com a Serena Energia! N√≥s oferecemos desconto na sua conta de luz atrav√©s da nossa energia solar, sem precisar instalar nada na sua casa..."

Gere apenas a resposta que ser√° enviada ao lead via WhatsApp:"""

    def get_promotions_response_prompt(
        self, 
        lead_message: str, 
        city: str, 
        state: str, 
        promotions: List[Dict[str, Any]]
    ) -> str:
        """
        Gera prompt para resposta com promo√ß√µes da API Serena.
        
        Args:
            lead_message (str): Mensagem do lead
            city (str): Cidade detectada
            state (str): Estado detectado
            promotions (List[Dict[str, Any]]): Lista de promo√ß√µes da API Serena
            
        Returns:
            str: Prompt formatado para a OpenAI
        """
        if promotions:
            # Formatar promo√ß√µes para o prompt
            promotions_text = []
            for i, promo in enumerate(promotions, 1):
                distributor = promo.get('energyUtilityName', 'Distribuidora')
                discount = promo.get('discountPercentage', 0)
                promotions_text.append(f"{i}. {distributor} - {discount}% de desconto")
            
            promotions_str = "\n".join(promotions_text)
            
            return f"""O lead enviou: "{lead_message}" e voc√™ identificou que mora em {city}/{state}.

√ìTIMA NOT√çCIA! Encontramos {len(promotions)} promo√ß√µes dispon√≠veis para {city}/{state}:

{promotions_str}

Sua resposta deve:
1. Confirmar a localiza√ß√£o ({city}/{state})
2. Apresentar as promo√ß√µes de forma clara e atrativa
3. Explicar que s√£o descontos na conta de luz com energia solar sem instala√ß√£o
4. Solicitar que envie uma FOTO ou PDF da conta de energia atual
5. Ser entusiasmada e usar emojis moderadamente
6. M√°ximo 3 par√°grafos

Gere apenas a resposta que ser√° enviada ao lead via WhatsApp:"""
        else:
            return f"""O lead enviou: "{lead_message}" e voc√™ identificou que mora em {city}/{state}.

INFELIZMENTE n√£o encontramos promo√ß√µes ativas para {city}/{state} no momento.

Sua resposta deve:
1. Confirmar a localiza√ß√£o ({city}/{state})
2. Explicar que n√£o h√° promo√ß√µes ativas no momento
3. Pedir para enviar uma FOTO ou PDF da conta de energia mesmo assim
4. Explicar que vamos analisar e buscar alternativas
5. Manter tom positivo e esperan√ßoso
6. M√°ximo 2 par√°grafos

Gere apenas a resposta que ser√° enviada ao lead via WhatsApp:""" 