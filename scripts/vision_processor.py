#!/usr/bin/env python3
"""
Vision Processor Module

Este m√≥dulo cont√©m a l√≥gica para processamento de imagens de conta de energia
usando a Vision API do OpenAI GPT-4o-mini.

Author: Serena-Coder AI Agent
Version: 1.0.0 - Refatora√ß√£o para modulariza√ß√£o
Created: 2025-01-17
"""

import re
import json
import logging
import requests
from typing import Dict, Any, Optional
from openai import OpenAI

# Configure logging
logger = logging.getLogger(__name__)


class VisionProcessor:
    """
    Classe respons√°vel pelo processamento de imagens de conta de energia
    usando Vision API e valida√ß√£o dos dados extra√≠dos.
    """
    
    def __init__(self, openai_client: OpenAI, whatsapp_token: str):
        """
        Inicializa o processador de vis√£o.
        
        Args:
            openai_client (OpenAI): Cliente OpenAI configurado
            whatsapp_token (str): Token da API do WhatsApp
        """
        self.openai_client = openai_client
        self.whatsapp_token = whatsapp_token
        
        # Palavras-chave para identifica√ß√£o de conta de energia
        self.energy_keywords = [
            'conta', 'fatura', 'luz', 'energia', 'cemig', 'enel', 'light', 
            'cpfl', 'elektro', 'coelba', 'celpe', 'cosern', 'coelce',
            'celg', 'ceb', 'copel', 'rge', 'ceee', 'celesc', 'energisa',
            'ampla', 'bandeirante', 'piratininga', 'aes', 'distribuidora'
        ]
        
        # Palavras-chave negativas (conversas gerais)
        self.negative_keywords = [
            'como funciona', 'quanto custa', 'sobre energia', 'energia solar',
            'explicar', 'd√∫vida', 'pergunta', 'informa√ß√£o'
        ]
    
    def is_energy_bill_image(self, message: str) -> bool:
        """
        Verifica se a mensagem indica que uma imagem de conta de energia foi enviada.
        
        Args:
            message (str): Mensagem recebida junto com a imagem
            
        Returns:
            bool: True se √© prov√°vel que seja uma conta de energia
        """
        message_lower = message.lower()
        
        # Se mensagem cont√©m [FATURA_ENVIADA:] ou [DOCUMENTO_ENVIADO:]
        if '[FATURA_ENVIADA:' in message or '[DOCUMENTO_ENVIADO:' in message:
            return True
        
        # Se mensagem cont√©m palavras-chave de energia
        if any(keyword in message_lower for keyword in self.energy_keywords):
            return True
        
        # Se mensagem √© muito curta (provavelmente s√≥ imagem)
        if len(message.strip()) < 10:
            return True
        
        # Verificar indicadores negativos
        if any(keyword in message_lower for keyword in self.negative_keywords):
            return False
        
        return False
    
    def get_whatsapp_media_url(self, media_id: str) -> Optional[str]:
        """
        Obt√©m a URL da m√≠dia do WhatsApp usando o media_id.
        
        Args:
            media_id (str): ID da m√≠dia fornecido pelo webhook
            
        Returns:
            Optional[str]: URL da m√≠dia ou None se falhar
        """
        try:
            # URL da API do WhatsApp para obter informa√ß√µes da m√≠dia
            media_info_url = f"https://graph.facebook.com/v23.0/{media_id}"
            
            headers = {
                "Authorization": f"Bearer {self.whatsapp_token}",
                "Content-Type": "application/json"
            }
            
            # Obter informa√ß√µes da m√≠dia
            response = requests.get(media_info_url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                media_info = response.json()
                media_url = media_info.get('url')
                
                if media_url:
                    logger.info(f"‚úÖ URL da m√≠dia obtida: {media_id}")
                    return media_url
                else:
                    logger.error(f"‚ùå URL n√£o encontrada na resposta da m√≠dia: {media_id}")
                    return None
            else:
                logger.error(f"‚ùå Falha ao obter informa√ß√µes da m√≠dia: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter URL da m√≠dia: {str(e)}")
            return None
    
    def extract_bill_data_with_vision(
        self,
        image_url: str,
        model: str = "gpt-4o-mini",
        max_tokens: int = 400,
        temperature: float = 0.3
    ) -> Dict[str, Any]:
        """
        Extrai dados da conta de energia usando Vision API do GPT-4o-mini.
        
        Args:
            image_url (str): URL da imagem da conta
            model (str): Modelo OpenAI
            max_tokens (int): M√°ximo de tokens
            temperature (float): Temperatura (baixa para precis√£o)
            
        Returns:
            Dict[str, Any]: Dados extra√≠dos da conta
        """
        try:
            logger.info(f"üîç Extraindo dados da conta usando Vision API")
            
            # Construir payload multimodal para Vision API
            response = self.openai_client.chat.completions.create(
                model=model,
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "text",
                                "text": """Esta √© uma conta de energia el√©trica brasileira. Por favor, extraia as seguintes informa√ß√µes em formato JSON:

{
  "cliente_nome": "Nome do cliente/titular",
  "valor_total": "Valor total a pagar (R$)",
  "consumo_kwh": "Consumo em kWh",
  "distribuidora": "Nome da distribuidora",
  "vencimento": "Data de vencimento",
  "endereco": "Endere√ßo de instala√ß√£o",
  "numero_instalacao": "N√∫mero da instala√ß√£o"
}

Se n√£o conseguir identificar algum campo, use "N√ÉO_IDENTIFICADO". Seja preciso com os valores num√©ricos."""
                            },
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": image_url
                                }
                            }
                        ]
                    }
                ],
                max_tokens=max_tokens,
                temperature=temperature
            )
            
            # Extrair resposta
            extracted_text = response.choices[0].message.content
            logger.info(f"üìÑ Resposta da Vision API: {extracted_text}")
            
            # Tentar parsear JSON da resposta
            try:
                # Buscar JSON na resposta
                json_match = re.search(r'\{.*\}', extracted_text, re.DOTALL)
                if json_match:
                    json_str = json_match.group(0)
                    extracted_data = json.loads(json_str)
                    
                    # Validar dados extra√≠dos
                    if self.validate_extracted_data(extracted_data):
                        logger.info(f"‚úÖ Dados extra√≠dos com sucesso")
                        return {
                            "success": True,
                            "data": extracted_data,
                            "raw_response": extracted_text
                        }
                    else:
                        logger.warning(f"‚ö†Ô∏è Dados extra√≠dos n√£o passaram na valida√ß√£o")
                        return {
                            "success": False,
                            "error": "Dados extra√≠dos inv√°lidos",
                            "data": extracted_data,
                            "raw_response": extracted_text
                        }
                else:
                    logger.error(f"‚ùå N√£o foi poss√≠vel encontrar JSON na resposta")
                    return {
                        "success": False,
                        "error": "JSON n√£o encontrado na resposta",
                        "raw_response": extracted_text
                    }
                    
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå Erro ao parsear JSON: {str(e)}")
                return {
                    "success": False,
                    "error": f"Erro ao parsear JSON: {str(e)}",
                    "raw_response": extracted_text
                }
                
        except Exception as e:
            logger.error(f"‚ùå Erro na Vision API: {str(e)}")
            return {
                "success": False,
                "error": f"Erro na Vision API: {str(e)}"
            }
    
    def validate_extracted_data(self, data: Dict[str, Any]) -> bool:
        """
        Valida os dados extra√≠dos da conta de energia.
        
        Args:
            data (Dict[str, Any]): Dados extra√≠dos
            
        Returns:
            bool: True se dados s√£o v√°lidos
        """
        try:
            # Verificar se campos obrigat√≥rios existem
            required_fields = ['cliente_nome', 'valor_total', 'distribuidora']
            
            for field in required_fields:
                if field not in data or not data[field] or data[field] == "N√ÉO_IDENTIFICADO":
                    logger.warning(f"‚ö†Ô∏è Campo obrigat√≥rio ausente ou inv√°lido: {field}")
                    return False
            
            # Validar valor total (deve conter R$ e n√∫meros)
            valor_total = str(data['valor_total'])
            if not re.search(r'R?\$?\s*\d+[,.]?\d*', valor_total):
                logger.warning(f"‚ö†Ô∏è Valor total inv√°lido: {valor_total}")
                return False
            
            # Validar nome do cliente (m√≠nimo 3 caracteres)
            if len(str(data['cliente_nome']).strip()) < 3:
                logger.warning(f"‚ö†Ô∏è Nome do cliente muito curto: {data['cliente_nome']}")
                return False
            
            logger.info(f"‚úÖ Dados validados com sucesso")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro na valida√ß√£o: {str(e)}")
            return False
    
    def generate_final_conversation_response(
        self,
        extracted_data: Dict[str, Any],
        model: str = "gpt-4o-mini",
        max_tokens: int = 400,
        temperature: float = 0.7
    ) -> str:
        """
        Gera a resposta final da conversa ap√≥s processar a conta de energia.
        Implementa a Etapa 6 do MASTER_GUIDE_FINAL.md.
        
        Args:
            extracted_data (Dict[str, Any]): Dados extra√≠dos da conta
            model (str): Modelo OpenAI
            max_tokens (int): M√°ximo de tokens
            temperature (float): Temperatura da IA
            
        Returns:
            str: Resposta final da conversa
        """
        try:
            # Obter dados extra√≠dos
            data = extracted_data.get('data', {})
            cliente_nome = data.get('cliente_nome', 'Cliente')
            valor_total = data.get('valor_total', 'N√£o identificado')
            distribuidora = data.get('distribuidora', 'Distribuidora')
            
            # Prompt para resposta final conforme Etapa 6
            prompt = f"""Voc√™ √© a Serena, assistente virtual da SRna Energia. Voc√™ acabou de analisar a conta de energia do lead e extraiu os seguintes dados:

- Cliente: {cliente_nome}
- Valor da conta: {valor_total}
- Distribuidora: {distribuidora}

ESTA √â A RESPOSTA FINAL DA CONVERSA. Sua resposta deve seguir exatamente a Etapa 6:

1. ‚úÖ CONFIRMAR que analisou a conta com sucesso
2. üìä APRESENTAR os dados extra√≠dos de forma clara
3. üéØ APRESENTAR as promo√ß√µes dispon√≠veis (que foram consultadas anteriormente)
4. üôè AGRADECER o interesse do lead
5. üìû INFORMAR que um especialista entrar√° em contato em at√© 24 horas
6. üëã SE DESPEDIR de forma amig√°vel

Exemplo de estrutura:
"‚úÖ Perfeito! Analisei sua conta da [DISTRIBUIDORA] com sucesso!

üìä Dados confirmados:
‚Ä¢ Cliente: [NOME]
‚Ä¢ Valor atual: [VALOR]
‚Ä¢ Distribuidora: [DISTRIBUIDORA]

üéØ Com base no seu perfil, voc√™ pode economizar significativamente com nossas promo√ß√µes de energia solar sem instala√ß√£o!

üôè Obrigada pelo seu interesse na Serena Energia! Um de nossos especialistas entrar√° em contato em at√© 24 horas para calcular sua economia personalizada.

üëã Tenha um √≥timo dia!"

Seja entusiasmada, use emojis moderadamente e m√°ximo 4 par√°grafos. Gere apenas a resposta:"""
            
            # Gerar resposta usando OpenAI
            response = self.openai_client.chat.completions.create(
                model=model,
                messages=[{"role": "user", "content": prompt}],
                max_tokens=max_tokens,
                temperature=temperature
            )
            
            final_response = response.choices[0].message.content.strip()
            logger.info(f"‚úÖ Resposta final gerada com sucesso")
            
            return final_response
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar resposta final: {str(e)}")
            # Resposta de fallback
            return f"""‚úÖ Obrigada por enviar sua conta de energia!

Analisei os dados e nossa equipe entrar√° em contato em at√© 24 horas para apresentar as melhores op√ß√µes de economia para voc√™.

üôè A Serena Energia agradece seu interesse! 

üëã Tenha um √≥timo dia!"""
    
    def create_error_response(self, error_message: str) -> str:
        """
        Cria resposta amig√°vel para erros de processamento de imagem.
        
        Args:
            error_message (str): Mensagem de erro t√©cnica
            
        Returns:
            str: Resposta amig√°vel para o lead
        """
        return """Desculpe, tive dificuldades para analisar a imagem da sua conta de energia. üòî

Pode tentar enviar novamente? Algumas dicas:
üì∏ Foto bem iluminada e n√≠tida
üìÑ Todos os dados vis√≠veis
üì± Imagem na vertical

Ou se preferir, pode enviar um PDF da conta. Estou aqui para ajudar! üòä"""
