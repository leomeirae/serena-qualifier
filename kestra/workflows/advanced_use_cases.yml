id: advanced-use-cases
namespace: serena.energia
description: "Casos de Uso Avan√ßados - SerenaAIAgent com Intelig√™ncia Contextual"

labels:
  version: "1.0.0"
  environment: "production"
  type: "advanced"
  framework: "langchain"

triggers:
  - id: advanced-webhook
    type: io.kestra.plugin.core.trigger.Webhook
    key: "advanced_cases"

variables:
  qualification_threshold: 150
  max_follow_ups: 3
  premium_amount: 500

tasks:
  # CASO 1: An√°lise Multi-Contexto
  - id: multi-context-analysis
    type: io.kestra.plugin.scripts.python.Script
    description: "An√°lise considerando hist√≥rico e m√∫ltiplas inten√ß√µes"
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: "serena/kestra-python-runner:latest"
      pullPolicy: "NEVER"
      networkMode: "serena-qualifier_kestra-network"
    env:
      LEAD_PHONE: "{{ trigger.body.lead_phone }}"
      LEAD_MESSAGE: "{{ trigger.body.lead_message }}"
      CONVERSATION_HISTORY: "{{ trigger.body.conversation_history | default('[]') }}"
      LEAD_PROFILE: "{{ trigger.body.lead_profile | default('{}') }}"
    script: |
      import sys
      sys.path.append('.')
      from dotenv import load_dotenv
      load_dotenv('/app/.env')
      
      from scripts.serena_agent.core_agent import SerenaAIAgent
      from scripts.serena_agent.tools.conversation_tool import conversation_tool_function
      import os
      import json
      import time
      
      phone = os.getenv("LEAD_PHONE")
      message = os.getenv("LEAD_MESSAGE")
      
      try:
          history = json.loads(os.getenv("CONVERSATION_HISTORY", "[]"))
          profile = json.loads(os.getenv("LEAD_PROFILE", "{}"))
      except:
          history, profile = [], {}
      
      print(f"üß† AN√ÅLISE MULTI-CONTEXTO - Lead {phone}")
      print(f"üìö Hist√≥rico: {len(history)} mensagens")
      
      start_time = time.time()
      
      try:
          agent = SerenaAIAgent()
          
          # Recuperar contexto hist√≥rico
          history_context = conversation_tool_function({
              "action": "get_conversation_history", 
              "phone": phone
          })
          
          # An√°lise contextual avan√ßada
          enhanced_context = f"""
          CONTEXTO HIST√ìRICO: {json.dumps(history_context.get('result', {}), indent=2)}
          PERFIL DO LEAD: {json.dumps(profile, indent=2)}
          MENSAGEM ATUAL: {message}
          """
          
          # Classifica√ß√£o e extra√ß√£o contextual
          classification = agent.process_conversation(phone, enhanced_context, "classify")
          extraction = agent.process_conversation(phone, enhanced_context, "extract")
          
          # An√°lise de sentimento
          sentiment_analysis = agent.process_conversation(
              phone, 
              f"Analise o sentimento desta mensagem: {message}",
              "respond"
          )
          
          multi_context = {
              "phone": phone,
              "message": message,
              "enhanced_classification": classification.get("response"),
              "enriched_extraction": extraction.get("response"),
              "sentiment_analysis": sentiment_analysis.get("response"),
              "context_layers": {
                  "history_messages": len(history),
                  "profile_available": bool(profile),
                  "langchain_active": agent.agent_executor is not None
              },
              "processing_time": time.time() - start_time,
              "analysis_depth": "multi_context"
          }
          
          print(f"‚úÖ An√°lise completa - {time.time() - start_time:.3f}s")
          
      except Exception as e:
          print(f"‚ùå Erro: {str(e)}")
          multi_context = {"error": str(e), "phone": phone}
      
      print('::' + json.dumps({"outputs": {"multi_context": multi_context}}) + '::')

  # CASO 2: Qualifica√ß√£o Din√¢mica
  - id: dynamic-qualification
    type: io.kestra.plugin.scripts.python.Script
    description: "Qualifica√ß√£o baseada em m√∫ltiplos crit√©rios"
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: "serena/kestra-python-runner:latest"
      pullPolicy: "NEVER"
      networkMode: "serena-qualifier_kestra-network"
    env:
      MULTI_CONTEXT: "{{ outputs['multi-context-analysis'].vars.multi_context | json }}"
      THRESHOLD: "{{ vars.qualification_threshold }}"
      PREMIUM_THRESHOLD: "{{ vars.premium_amount }}"
    script: |
      import sys
      sys.path.append('.')
      from dotenv import load_dotenv
      load_dotenv('/app/.env')
      
      from scripts.serena_agent.tools.serena_api_tool import serena_api_tool_function
      import os
      import json
      import re
      
      context = json.loads(os.getenv("MULTI_CONTEXT", "{}"))
      threshold = float(os.getenv("THRESHOLD", "150"))
      premium_threshold = float(os.getenv("PREMIUM_THRESHOLD", "500"))
      
      phone = context.get("phone")
      message = context.get("message", "")
      
      print(f"üéØ QUALIFICA√á√ÉO DIN√ÇMICA - Lead {phone}")
      
      try:
          # Extrair valores da mensagem
          valores_encontrados = re.findall(r'R?\$?\s*(\d+(?:[.,]\d{2})?)', message)
          valores_numericos = []
          
          for valor in valores_encontrados:
              try:
                  valor_num = float(valor.replace(',', '.'))
                  valores_numericos.append(valor_num)
              except:
                  continue
          
          # An√°lise de qualifica√ß√£o
          if valores_numericos:
              valor_max = max(valores_numericos)
              if valor_max >= premium_threshold:
                  categoria = "premium"
                  prioridade = "alta"
              elif valor_max >= threshold:
                  categoria = "qualificado"
                  prioridade = "media"
              else:
                  categoria = "baixo_valor"
                  prioridade = "baixa"
          else:
              # An√°lise contextual
              sentiment = context.get("sentiment_analysis", "")
              if "urgente" in sentiment.lower():
                  categoria = "urgente"
                  prioridade = "alta"
              else:
                  categoria = "interesse"
                  prioridade = "media"
          
          # Buscar planos
          planos_result = serena_api_tool_function({
              "action": "get_plans",
              "location": "S√£o Paulo, SP"
          })
          
          planos = planos_result.get("result", {}).get("plans", [])
          plano_recomendado = None
          
          if planos:
              if categoria == "premium":
                  plano_recomendado = max(planos, key=lambda p: p.get("discount_percentage", 0))
              else:
                  plano_recomendado = planos[0] if planos else None
          
          qualification_result = {
              "phone": phone,
              "categoria": categoria,
              "prioridade": prioridade,
              "valores_encontrados": valores_numericos,
              "valor_maximo": max(valores_numericos) if valores_numericos else 0,
              "plano_recomendado": plano_recomendado,
              "planos_disponiveis": len(planos)
          }
          
          print(f"üè∑Ô∏è  Categoria: {categoria}")
          print(f"‚ö° Prioridade: {prioridade}")
          
      except Exception as e:
          print(f"‚ùå Erro: {str(e)}")
          qualification_result = {"error": str(e), "phone": phone}
      
      print('::' + json.dumps({"outputs": {"qualification": qualification_result}}) + '::')

  # CASO 3: Resposta Personalizada
  - id: personalized-response
    type: io.kestra.plugin.scripts.python.Script
    description: "Resposta adaptativa baseada em qualifica√ß√£o"
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: "serena/kestra-python-runner:latest"
      pullPolicy: "NEVER"
      networkMode: "serena-qualifier_kestra-network"
    env:
      MULTI_CONTEXT: "{{ outputs['multi-context-analysis'].vars.multi_context | json }}"
      QUALIFICATION: "{{ outputs['dynamic-qualification'].vars.qualification | json }}"
    script: |
      import sys
      sys.path.append('.')
      from dotenv import load_dotenv
      load_dotenv('/app/.env')
      
      from scripts.serena_agent.core_agent import SerenaAIAgent
      import os
      import json
      
      context = json.loads(os.getenv("MULTI_CONTEXT", "{}"))
      qualification = json.loads(os.getenv("QUALIFICATION", "{}"))
      
      phone = context.get("phone")
      message = context.get("message")
      categoria = qualification.get("categoria", "interesse")
      plano = qualification.get("plano_recomendado", {})
      
      print(f"üé® RESPOSTA PERSONALIZADA - Lead {phone}")
      print(f"üè∑Ô∏è  Categoria: {categoria}")
      
      try:
          agent = SerenaAIAgent()
          
          # Prompt personalizado baseado na categoria
          if categoria == "premium":
              response_context = f"""
              LEAD PREMIUM DETECTADO
              Valor: R$ {qualification.get('valor_maximo', 0):.2f}
              Plano: {plano.get('name', 'N/A')} - {plano.get('discount_percentage', 0)}%
              
              INSTRU√á√ïES: Tratamento VIP, agenda t√©cnica especializada
              Mensagem: {message}
              """
          elif categoria == "qualificado":
              response_context = f"""
              LEAD QUALIFICADO
              Valor: R$ {qualification.get('valor_maximo', 0):.2f}
              Plano: {plano.get('name', 'N/A')}
              
              INSTRU√á√ïES: Foco em economia, simula√ß√£o personalizada
              Mensagem: {message}
              """
          else:
              response_context = f"""
              LEAD INICIAL - Categoria: {categoria}
              INSTRU√á√ïES: Abordagem educativa, despertar interesse
              Mensagem: {message}
              """
          
          # Gerar resposta
          response_result = agent.process_conversation(phone, response_context, "respond")
          
          personalized_response = {
              "phone": phone,
              "response": response_result.get("response", "Resposta indispon√≠vel"),
              "categoria": categoria,
              "method_used": response_result.get("method", "unknown"),
              "plano_mencionado": plano.get("name", "N/A") if plano else "N/A"
          }
          
          print(f"üí¨ Resposta gerada para categoria: {categoria}")
          
      except Exception as e:
          print(f"‚ùå Erro: {str(e)}")
          personalized_response = {"error": str(e), "phone": phone}
      
      print('::' + json.dumps({"outputs": {"personalized_response": personalized_response}}) + '::')

  # CASO 4: Envio Final
  - id: advanced-send
    type: io.kestra.plugin.scripts.python.Script
    description: "Envio com analytics avan√ßados"
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: "serena/kestra-python-runner:latest"
      pullPolicy: "NEVER"
      networkMode: "serena-qualifier_kestra-network"
    env:
      PERSONALIZED_RESPONSE: "{{ outputs['personalized-response'].vars.personalized_response | json }}"
      QUALIFICATION: "{{ outputs['dynamic-qualification'].vars.qualification | json }}"
    script: |
      import os
      import json
      import requests
      import time
      
      response_data = json.loads(os.getenv("PERSONALIZED_RESPONSE", "{}"))
      qualification = json.loads(os.getenv("QUALIFICATION", "{}"))
      
      phone = response_data.get("phone")
      message = response_data.get("response")
      categoria = qualification.get("categoria", "unknown")
      
      print(f"üìä ENVIO AVAN√áADO - Lead {phone}")
      print(f"üè∑Ô∏è  Categoria: {categoria}")
      
      try:
          # Enviar mensagem
          whatsapp_url = "http://whatsapp-service:8000/whatsapp/send_text_message"
          payload = {"phone": phone, "message": message}
          
          response = requests.post(whatsapp_url, json=payload, timeout=30)
          response.raise_for_status()
          
          result = response.json()
          message_id = result.get("message_id", "")
          
          # Analytics avan√ßados
          analytics = {
              "workflow": "advanced_use_cases",
              "categoria": categoria,
              "valor_detectado": qualification.get("valor_maximo", 0),
              "plano_recomendado": qualification.get("plano_recomendado", {}).get("name", "N/A"),
              "method_used": response_data.get("method_used", "unknown"),
              "expected_conversion": 0.8 if categoria == "premium" else 0.5,
              "message_sent": True,
              "message_id": message_id
          }
          
          print(f"‚úÖ Enviado! ID: {message_id}")
          print(f"üéØ Convers√£o esperada: {analytics['expected_conversion']:.1%}")
          
          final_result = {
              "success": True,
              "message_id": message_id,
              "analytics": analytics
          }
          
      except Exception as e:
          print(f"‚ùå Erro: {str(e)}")
          final_result = {"success": False, "error": str(e)}
      
      print('::' + json.dumps({"outputs": {"final_result": final_result}}) + '::')

timeout: "PT5M" 