id: 1_lead_activation_flow
namespace: serena.production
description: "Fluxo de Produção 1: Salva o lead inicial no Supabase e envia o template de ativação."

triggers:
  - id: activate_production_lead
    type: io.kestra.plugin.core.trigger.Webhook
    key: activate_production_lead

tasks:
  # TAREFA 1: Salvar o lead inicial no banco de dados.
  - id: save_initial_lead
    type: io.kestra.plugin.scripts.python.Script
    description: "Salva os dados iniciais do formulário no Supabase."
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: serena/kestra-python-runner:latest
      pullPolicy: NEVER
      networkMode: serena-qualifier_kestra-network
    env:
      SUPABASE_URL: "{{ secret('SUPABASE_URL') }}"
      SUPABASE_KEY: "{{ secret('SUPABASE_KEY') }}"
      DB_CONNECTION_STRING: "{{ secret('DB_CONNECTION_STRING') }}"
    script: |
      import subprocess
      import shlex
      import os

      # Monta o comando de forma segura para evitar problemas de injeção
      command = [
          "python", "/app/scripts/save_lead_to_supabase.py",
          "--name", shlex.quote('{{ trigger.body.name }}'),
          "--phone", shlex.quote('{{ trigger.body.whatsapp }}'),
          "--email", shlex.quote('{{ trigger.body.email }}'),
          "--account_value", shlex.quote('{{ trigger.body.account_value | default("") }}'),
          "--client_type", shlex.quote('{{ trigger.body.client_type | default("") }}'),
          "--state", shlex.quote('{{ trigger.body.estado | default("") }}'),
          "--city", shlex.quote('{{ trigger.body.cidade | default("") }}')
      ]
      
      # Executa o comando e verifica por erros
      subprocess.run(command, check=True, text=True)

  # TAREFA 2: Enviar o template de ativação via WhatsApp.
  # Esta tarefa só executa se a anterior (save_initial_lead) for bem-sucedida.
  - id: send_activation_template
    type: io.kestra.plugin.scripts.python.Script
    description: "Envia o template inicial de WhatsApp para o lead."
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: serena/kestra-python-runner:latest
      pullPolicy: NEVER
      networkMode: serena-qualifier_kestra-network
    env:
      WHATSAPP_API_TOKEN: "{{ secret('WHATSAPP_API_TOKEN') }}"
      WHATSAPP_PHONE_NUMBER_ID: "{{ secret('WHATSAPP_PHONE_NUMBER_ID') }}"
      WHATSAPP_WELCOME_TEMPLATE_NAME: "{{ secret('WHATSAPP_WELCOME_TEMPLATE_NAME') }}"
    script: |
      import sys
      sys.path.append('/app')
      
      from scripts.send_whatsapp_template import send_activation_template
      import os

      result = send_activation_template(
          phone_number='{{ trigger.body.whatsapp }}',
          lead_name='{{ trigger.body.name }}',
          phone_number_id=os.environ['WHATSAPP_PHONE_NUMBER_ID'],
          template_name=os.environ['WHATSAPP_WELCOME_TEMPLATE_NAME']
      )
      
      # Saída para os logs
      success = result['success']
      message_id = result.get('message_id', 'N/A')
      
      print(f"SUCCESS: {success}")
      print(f"MESSAGE_ID: {message_id}")

  # TAREFA 3: Log de conclusão
  - id: log_completion
    type: io.kestra.plugin.core.log.Log
    description: "Registra conclusão do fluxo de ativação"
    message: |
      ✅ FLUXO DE ATIVAÇÃO CONCLUÍDO
      ================================================
      Lead: {{ trigger.body.name }}
      Email: {{ trigger.body.email }}
      WhatsApp: {{ trigger.body.whatsapp }}
      Estado: {{ trigger.body.estado }}
      Cidade: {{ trigger.body.cidade }}
      Valor da Conta: R$ {{ trigger.body.account_value }}
      Timestamp: {{ execution.startDate }}
      
      O lead foi salvo no Supabase e o template de ativação foi enviado via WhatsApp. 