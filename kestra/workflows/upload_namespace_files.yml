id: upload_namespace_files
namespace: serena.production
description: "Upload script files from mounted volume to namespace files storage"

tasks:
  - id: upload-scripts
    type: io.kestra.plugin.scripts.python.Script
    description: "Upload script files to namespace files storage using Kestra API"
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: python:3.11-slim
    
    beforeCommands:
      - pip install requests
    
    script: |
      import os
      import requests
      import logging
      
      # Configure logging
      logging.basicConfig(level=logging.INFO)
      logger = logging.getLogger(__name__)
      
      def upload_file_to_namespace(file_path: str, namespace_path: str, kestra_url: str) -> bool:
          """Upload a file to Kestra namespace files storage."""
          try:
              # Read the file content
              with open(file_path, 'rb') as f:
                  file_content = f.read()
              
              # Prepare the multipart form data
              files = {
                  'fileContent': (namespace_path, file_content, 'application/octet-stream')
              }
              
              # Upload to Kestra API
              upload_url = f"{kestra_url}/namespaces/serena.production/files"
              params = {'path': namespace_path}
              
              response = requests.post(upload_url, files=files, params=params)
              
              if response.status_code in [200, 201]:
                  logger.info(f"‚úÖ Successfully uploaded {namespace_path}")
                  return True
              else:
                  logger.error(f"‚ùå Failed to upload {namespace_path}: {response.status_code} - {response.text}")
                  return False
                  
          except Exception as e:
              logger.error(f"‚ùå Error uploading {namespace_path}: {str(e)}")
              return False
      
      def main():
          """Main function to upload all script files."""
          # Kestra API URL (internal Docker network)
          kestra_url = "http://kestra:8081/api/v1"
          
          # Files to upload (local path -> namespace path)
          files_to_upload = {
              'scripts/ai_conversation_handler.py': 'scripts/ai_conversation_handler.py',
              'scripts/location_extractor.py': 'scripts/location_extractor.py',
              'scripts/conversation_context.py': 'scripts/conversation_context.py',
              'scripts/serena_api.py': 'scripts/serena_api.py',
              'scripts/save_lead_to_supabase.py': 'scripts/save_lead_to_supabase.py'
          }
          
          success_count = 0
          total_files = len(files_to_upload)
          
          logger.info(f"üöÄ Starting upload of {total_files} files to Kestra namespace files storage...")
          
          for local_path, namespace_path in files_to_upload.items():
              if os.path.exists(local_path):
                  if upload_file_to_namespace(local_path, namespace_path, kestra_url):
                      success_count += 1
              else:
                  logger.warning(f"‚ö†Ô∏è File not found: {local_path}")
          
          logger.info(f"üìä Upload completed: {success_count}/{total_files} files uploaded successfully")
          
          if success_count == total_files:
              logger.info("üéâ All files uploaded successfully! The 2_ai_conversation_flow workflow should now work.")
              return True
          else:
              logger.error("‚ùå Some files failed to upload. Check the logs above for details.")
              return False
      
      # Run the upload
      success = main()
      exit(0 if success else 1)

  - id: verify-upload
    type: io.kestra.plugin.core.log.Log
    message: |
      ‚úÖ Namespace files upload workflow completed!
      
      The script files have been uploaded to the namespace files storage:
      - scripts/ai_conversation_handler.py
      - scripts/location_extractor.py  
      - scripts/conversation_context.py
      - scripts/serena_api.py
      - scripts/save_lead_to_supabase.py
      
      The 2_ai_conversation_flow workflow should now be able to access these files via the read() function. 