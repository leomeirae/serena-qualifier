id: lead-activation-workflow
namespace: serena.energia
description: "Fluxo 1: Ativa√ß√£o do Lead - Captura dados do formul√°rio e envia primeira mensagem de boas-vindas"

triggers:
  - id: capture-webhook
    type: io.kestra.plugin.core.trigger.Webhook
    key: serena-capture-webhook

tasks:
  - id: save-initial-lead
    type: io.kestra.plugin.scripts.python.Script
    description: "Salva os dados iniciais do lead no Supabase"
    docker:
      image: python:3.11-slim
    beforeCommands:
      - pip install supabase python-dotenv
    script: |
      import os
      import json
      from datetime import datetime
      from supabase import create_client, Client
      from dotenv import load_dotenv
      
      # Carregar vari√°veis de ambiente
      load_dotenv()
      
      # Configurar Supabase
      url = os.getenv("SUPABASE_URL")
      key = os.getenv("SUPABASE_KEY")
      supabase: Client = create_client(url, key)
      
      # Extrair dados do trigger
      trigger_data = {{ trigger | json }}
      
      lead_data = {
          "name": trigger_data.get("name"),
          "email": trigger_data.get("email", "email@simulado.com"),
          "phone": trigger_data.get("phone"),
          "city": trigger_data.get("city", trigger_data.get("body", {}).get("cidade", "S√£o Paulo")),
          "created_at": datetime.utcnow().isoformat(),
          "status": "initial_capture",
          "source": "landing_page"
      }
      
      print(f"üíæ Salvando lead inicial: {lead_data}")
      
      # Salvar no Supabase
      result = supabase.table("leads_iniciados").insert(lead_data).execute()
      
      print(f"‚úÖ Lead salvo com sucesso: {result.data}")
      
      # Outputs para pr√≥xima tarefa
      print(f"::set-output name=lead_name::{lead_data['name']}")
      print(f"::set-output name=lead_phone::{lead_data['phone']}")
    env:
      SUPABASE_URL: "https://jkmqtworzvrpbnrenlyq.supabase.co"
      SUPABASE_KEY: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImprbXF0d29yenZycGJucmVubHlxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkyMjkzNjgsImV4cCI6MjA2NDgwNTM2OH0.t2wYbTf0qbBmFnTKO-kcHF3PG2ovVMgXuvw_kzFJGus"
      PYTHONPATH: "/app"

  - id: send-activation-template
    type: io.kestra.plugin.scripts.python.Script
    description: "Envia template de ativa√ß√£o via WhatsApp"
    docker:
      image: python:3.11-slim
    beforeCommands:
      - pip install requests python-dotenv
    script: |
      import os
      import requests
      import json
      from dotenv import load_dotenv
      
      # Carregar vari√°veis de ambiente
      load_dotenv()
      
      # Dados do lead da tarefa anterior
      lead_name = "{{ outputs['save-initial-lead'].vars.lead_name }}"
      lead_phone = "{{ outputs['save-initial-lead'].vars.lead_phone }}"
      
      print(f"üì± Enviando template de ativa√ß√£o para {lead_name} ({lead_phone})")
      
      # Configurar dados para WhatsApp
      whatsapp_data = {
          "phone_number": lead_phone,
          "customer_name": lead_name.split()[0] if lead_name else "Cliente"
      }
      
      # Chamar script whatsapp_real_sender.py
      try:
          from scripts.whatsapp_real_sender import send_template_message
          
          result = send_template_message(
              phone_number=whatsapp_data["phone_number"],
              customer_name=whatsapp_data["customer_name"]
          )
          
          print(f"‚úÖ Template enviado com sucesso: {result}")
          
      except Exception as e:
          print(f"‚ùå Erro ao enviar template: {str(e)}")
          raise
    env:
      WHATSAPP_API_TOKEN: "EAAPR0FG5sq8BO9M7rCnpNZC4Vk0SGab3VLdsIrwuzP0ePYODHDNI7kBaUNBSSQkfTh1DvZBzZCk3VyLZCAQRUjcB4hIyhNhZCD77EXKhvzI5sm1ZB7rX13RSoZCcocOUZBRe97fnmPk1PlS2mcVTsXnyyOUlpjtINpJLwFpzgBluaEUYuSqSUaWsjCZCJW3m0Jpuu5QZDZD"
      WHATSAPP_PHONE_NUMBER_ID: "599096403294262"
      WHATSAPP_WELCOME_TEMPLATE_NAME: "prosseguir_com_solicitacao"

