id: serena_ai_conversation_flow
namespace: serena.production
description: "Concierge Serena AI - Fluxo Conversacional Simplificado v4"

triggers:
  - id: webhook_lead_message
    type: io.kestra.plugin.core.trigger.Webhook
    key: converse_production_lead

variables:
  ai_model: "gpt-4o-mini"
  max_tokens: 1000
  temperature: 0.7

tasks:

  - id: gerar-resposta-ia
    type: io.kestra.plugin.openai.ChatCompletion
    apiKey: "{{ secret('OPENAI_API_KEY') }}"
    model: "{{ vars.ai_model }}"
    maxTokens: "{{ vars.max_tokens }}"
    temperature: "{{ vars.temperature }}"
    messages:
      - role: system
        content: |
          Você é Serena, assistente virtual da empresa Serena, especialista em qualificação de leads imobiliários. 
          Sempre solicite cidade e estado do cliente no primeiro contato.
      - role: user
        content: |
          Mensagem recebida: {{ trigger.body.message }}
          Telefone do cliente: {{ trigger.body.phone }}

  - id: enviar-mensagem-whatsapp
    type: io.kestra.plugin.scripts.python.Script
    description: "Envia a resposta da IA via WhatsApp"
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: python:3.11-slim

    env:
      OPENAI_RESPONSE: "{{ outputs['gerar-resposta-ia'].choices[0].message.content }}"
      WHATSAPP_API_TOKEN: "{{ secret('WHATSAPP_API_TOKEN') }}"
      WHATSAPP_PHONE_NUMBER_ID: "{{ envs.whatsapp_phone_number_id }}"
      SERENA_API_TOKEN: "{{ secret('SERENA_API_TOKEN') }}"
      SERENA_API_BASE_URL: "{{ envs.serena_api_base_url }}"
      SECRET_DB_CONNECTION_STRING: "{{ secret('DB_CONNECTION_STRING') }}"

    beforeCommands:
      - pip install requests psycopg2-binary python-json-logger supabase kestra

    script: |
      import os
      import requests
      from kestra import Kestra

      message_text = os.getenv('OPENAI_RESPONSE')
      phone_number = '{{ trigger.body.phone }}'
      whatsapp_token = os.getenv('WHATSAPP_API_TOKEN')
      phone_number_id = os.getenv('WHATSAPP_PHONE_NUMBER_ID')

      url = f"https://graph.facebook.com/v23.0/{phone_number_id}/messages"
      headers = {
          'Authorization': f'Bearer {whatsapp_token}',
          'Content-Type': 'application/json'
      }
      data = {
          "messaging_product": "whatsapp",
          "to": phone_number,
          "type": "text",
          "text": {"body": message_text}
      }

      response = requests.post(url, headers=headers, json=data)

      enviado = response.status_code == 200

      if enviado:
          print("✅ Mensagem enviada via WhatsApp.")
      else:
          print(f"❌ Falha no envio: {response.status_code}")
          print(response.text)

      Kestra.outputs({
          "whatsapp_status": response.status_code,
          "whatsapp_sent": str(enviado)
      })

  - id: log-processo-ok
    type: io.kestra.plugin.core.log.Log
    runIf: "{{ outputs['enviar-mensagem-whatsapp'].whatsapp_sent == 'true' }}"
    message: |
      ✅ Lead respondido com sucesso.
      Telefone: {{ trigger.body.phone }}
      Resposta IA enviada via WhatsApp.

  - id: log-processo-erro
    type: io.kestra.plugin.core.log.Log
    level: ERROR
    runIf: "{{ outputs['enviar-mensagem-whatsapp'].whatsapp_sent != 'true' }}"
    message: |
      ❌ Erro no envio da resposta ao lead.
      Telefone: {{ trigger.body.phone }}
      Verifique API do WhatsApp ou variáveis do ambiente.