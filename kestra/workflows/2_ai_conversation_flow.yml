id: 2_ai_conversation_flow
namespace: serena.production
description: "Workflow de conversação com IA v3 - Processa mensagens do lead e inicia conversa inteligente"

triggers:
  - id: converse_production_lead
    type: io.kestra.plugin.core.trigger.Webhook
    key: converse_production_lead
    description: "Recebe mensagens do lead para iniciar conversa com IA"

variables:
  # Configurações do modelo de IA
  ai_model: "gpt-4o-mini"
  max_tokens: 300
  temperature: 0.7

tasks:
  # Tarefa: Processar mensagem e iniciar conversa com IA
  - id: process-lead-message
    type: io.kestra.plugin.scripts.python.Script
    description: "Processa mensagem do lead e envia primeira resposta da IA"
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: python:3.11-slim
    
    inputFiles:
      scripts/__init__.py: |
        # Scripts package for Serena Qualifier
        # Contains AI agent tools and integrations
      scripts/ai_conversation_handler.py: "{{ read('scripts/ai_conversation_handler.py') }}"
      scripts/location_extractor.py: "{{ read('scripts/location_extractor.py') }}"
      scripts/conversation_context.py: "{{ read('scripts/conversation_context.py') }}"
      scripts/serena_api.py: "{{ read('scripts/serena_api.py') }}"
    
    # --- The following blocks are now correctly indented ---
    env:
      OPENAI_API_KEY: "{{ secret('OPENAI_API_KEY') }}"
      WHATSAPP_API_TOKEN: "{{ secret('WHATSAPP_API_TOKEN') }}"
      WHATSAPP_PHONE_NUMBER_ID: "{{ envs.whatsapp_phone_number_id }}"
      SERENA_API_TOKEN: "{{ secret('SERENA_API_TOKEN') }}"
      SERENA_API_BASE_URL: "{{ envs.serena_api_base_url }}"
      SECRET_DB_CONNECTION_STRING: "{{ envs.secret_db_connection_string }}"
    
    beforeCommands:
      - pip install --upgrade pip
      - pip install kestra python-dotenv requests "openai>=1.0.0" psycopg2-binary python-json-logger supabase
      - pip list | grep openai
    
    script: |
      import os
      import logging
      
      # Configurar logging
      logging.basicConfig(level=logging.INFO)
      logger = logging.getLogger(__name__)
      
      # Verificar variáveis de ambiente críticas
      logger.info("🔍 Verificando configuração do ambiente...")
      
      openai_key = os.getenv('OPENAI_API_KEY')
      whatsapp_token = os.getenv('WHATSAPP_API_TOKEN')
      # supabase_url = os.getenv('SUPABASE_URL')
      # supabase_key = os.getenv('SUPABASE_ANON_KEY')
      
      logger.info(f"🔑 OPENAI_API_KEY: {'✅ Configurada' if openai_key else '❌ Não configurada'}")
      logger.info(f"📱 WHATSAPP_API_TOKEN: {'✅ Configurada' if whatsapp_token else '❌ Não configurada'}")
      # logger.info(f"💾 SUPABASE_URL: {'✅ Configurada' if supabase_url else '❌ Não configurada'}")
      # logger.info(f"🔐 SUPABASE_ANON_KEY: {'✅ Configurada' if supabase_key else '❌ Não configurada'}")
      
      # Testar conexão OpenAI
      if openai_key:
          try:
              from openai import OpenAI
              client = OpenAI(api_key=openai_key, timeout=10.0)
              logger.info("🧪 Testando conexão com OpenAI...")
              
              # Teste simples
              response = client.chat.completions.create(
                  model="gpt-3.5-turbo",
                  messages=[{"role": "user", "content": "Teste"}],
                  max_tokens=10
              )
              logger.info("✅ Conexão OpenAI funcionando!")
              
          except Exception as e:
              logger.error(f"❌ Erro na conexão OpenAI: {str(e)}")
              # Continuar mesmo com erro, pois pode ser temporário
      
      # Importa o handler de conversação
      from scripts.ai_conversation_handler import handle_lead_message
      
      # Dados do trigger (mensagem do lead)
      phone_number = '{{ trigger.body.phone }}'
      message = '{{ trigger.body.message }}'
      
      # Log da mensagem recebida
      logger.info(f"📱 Mensagem recebida de {phone_number}")
      logger.info(f"💬 Conteúdo: {message}")
      
      # Processa mensagem e envia resposta
      result = handle_lead_message(
          phone_number=phone_number,
          message=message,
          ai_model='{{ vars.ai_model }}',
          max_tokens={{ vars.max_tokens }},
          temperature={{ vars.temperature }}
      )
      
      # Outputs para logging - usando formato correto do Kestra
      from kestra import Kestra
      
      # Usar o sistema de outputs do Kestra
      Kestra.outputs({
          'response_sent': str(result['success']),
          'ai_response': result.get('ai_response', 'N/A'),
          'whatsapp_message_id': result.get('whatsapp_message_id', 'N/A'),
          'lead_phone': phone_number
      })
      
      # Logs adicionais para debug
      logger.info(f"📊 Resultado: {result['success']}")
      logger.info(f"🤖 Resposta IA: {result.get('ai_response', 'N/A')}")
      logger.info(f"📱 WhatsApp ID: {result.get('whatsapp_message_id', 'N/A')}")
      logger.info(f"📞 Telefone: {phone_number}")

  # Log de sucesso da conversa
  - id: log-conversation-success
    type: io.kestra.plugin.core.log.Log
    description: "Registra sucesso do processamento da conversa"
    runIf: "{{ outputs['process-lead-message'].response_sent is defined and outputs['process-lead-message'].response_sent == 'true' }}"
    message: |
      ✅ CONVERSA COM IA INICIADA COM SUCESSO
      =====================================
      Phone: {{ trigger.body.phone }}
      Message Received: {{ trigger.body.message }}
      AI Response: {{ outputs['process-lead-message'].ai_response }}
      WhatsApp Message ID: {{ outputs['process-lead-message'].whatsapp_message_id }}
      Model Used: {{ vars.ai_model }}
      Timestamp: {{ execution.startDate }}
      
      O lead deve receber a solicitação de cidade e estado para prosseguir.

  # Log de erro no processamento
  - id: log-conversation-error
    type: io.kestra.plugin.core.log.Log
    description: "Registra erro no processamento da conversa"
    runIf: "{{ outputs['process-lead-message'].response_sent is not defined or outputs['process-lead-message'].response_sent != 'true' }}"
    level: ERROR
    message: |
      ❌ ERRO NO PROCESSAMENTO DA CONVERSA COM IA
      ==========================================
      Phone: {{ trigger.body.phone }}
      Message Received: {{ trigger.body.message }}
      Model: {{ vars.ai_model }}
      Timestamp: {{ execution.startDate }}
      
      Verificar logs do AI handler e configurações da OpenAI API. 