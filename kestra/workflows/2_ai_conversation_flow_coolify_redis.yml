id: 2_ai_conversation_flow_coolify_redis
namespace: serena.production
description: "Fluxo de Conversa com IA - Memória Redis via Coolify MCP Discovery"

triggers:
  - id: webhook_lead_message
    type: io.kestra.plugin.core.trigger.Webhook
    key: converse_production_lead
    description: "Recebe mensagens do lead via WhatsApp Webhook"

variables:
  ai_model: "gpt-4o-mini"
  max_tokens: 1500
  temperature: 0.7
  # Redis descoberto via MCP Server do Coolify
  redis_url: "redis://redis:6379/0"  # Será atualizado pelo script discovery
  enable_redis: false  # ✅ FALLBACK: Desabilitar Redis temporariamente
  # Configurações de monitoramento e métricas
  execution_metrics: true  # Habilitar métricas de execução
  log_level: "INFO"  # Nível de log (ERROR, WARN, INFO, DEBUG, TRACE)

tasks:
  # 1. Descobrir Redis no Coolify (opcional - para debug)
  - id: discover_redis_info
    type: io.kestra.plugin.scripts.python.Script
    description: "Descobre Redis usando MCP Server do Coolify"
    allowFailure: true
    beforeCommands:
      - pip install kestra  # ✅ Instalar módulo kestra
    script: |
      import json
      import os
      from pathlib import Path
      from kestra import Kestra
      
      # Tentar carregar configuração Redis descoberta
      config_path = Path("coolify_redis_config.json")
      if config_path.exists():
          with open(config_path, 'r') as f:
              config = json.load(f)
          print(f"✅ Redis descoberto: {config.get('redis_url', 'N/A')}")
      else:
          print("⚠️ Configuração Redis não encontrada, usando padrão")
      
      Kestra.outputs({'redis_discovered': config_path.exists()})

  # 2. Verificar primeiro contato (KV Store nativo)
  - id: check_first_contact
    type: io.kestra.plugin.core.kv.Get
    key: "first_contact_{{ trigger.body.phone }}"
    
  # 3. Recuperar contexto da conversa (Redis via Coolify)
  - id: get_conversation_context
    type: io.kestra.plugin.scripts.python.Script
    description: "Recuperar contexto via Redis com fallback"
    runIf: "{{ vars.enable_redis }}"
    beforeCommands:
      - pip install kestra redis
    env:
      REDIS_URL: "{{ vars.redis_url }}"
      PHONE_KEY: "silvia_context_{{ trigger.body.phone }}"
    script: |
      import redis
      import json
      import os
      from kestra import Kestra
      
      try:
          redis_client = redis.from_url(os.getenv('REDIS_URL'))
          phone_key = os.getenv('PHONE_KEY')
          
          # Tentar recuperar contexto
          context_data = redis_client.get(phone_key)
          if context_data:
              context = json.loads(context_data.decode('utf-8'))
              print(f"✅ Contexto recuperado: {len(str(context))} chars")
          else:
              context = {}
              print("⚠️ Nenhum contexto encontrado, usando vazio")
              
          Kestra.outputs({'context': context})
          
      except Exception as e:
          print(f"❌ Erro Redis: {e}")
          Kestra.outputs({'context': {}})
    allowFailure: true
    
  # 3b. Fallback: Contexto vazio quando Redis desabilitado
  - id: get_conversation_context_fallback
    type: io.kestra.plugin.scripts.python.Script
    description: "Contexto vazio (Redis desabilitado)"
    runIf: "{{ vars.enable_redis == false }}"
    beforeCommands:
      - pip install kestra
    script: |
      from kestra import Kestra
      print("⚠️ Redis desabilitado - usando contexto vazio")
      Kestra.outputs({'context': {}})
    allowFailure: true
    
  # 4. Recuperar histórico recente (Redis List)
  - id: get_recent_history
    type: io.kestra.plugin.scripts.python.Script
    description: "Recuperar histórico via Redis com fallback"
    runIf: "{{ vars.enable_redis }}"
    beforeCommands:
      - pip install kestra redis
    env:
      REDIS_URL: "{{ vars.redis_url }}"
      HISTORY_KEY: "silvia_history_{{ trigger.body.phone }}"
    script: |
      import redis
      import json
      import os
      from kestra import Kestra
      
      try:
          redis_client = redis.from_url(os.getenv('REDIS_URL'))
          history_key = os.getenv('HISTORY_KEY')
          
          # Recuperar últimas 5 mensagens
          history_data = redis_client.lrange(history_key, -5, -1)
          if history_data:
              history = [json.loads(item.decode('utf-8')) for item in history_data]
              print(f"✅ Histórico recuperado: {len(history)} mensagens")
          else:
              history = []
              print("⚠️ Nenhum histórico encontrado")
              
          Kestra.outputs({'history': history})
          
      except Exception as e:
          print(f"❌ Erro Redis: {e}")
          Kestra.outputs({'history': []})
    allowFailure: true
    
  # 4b. Fallback: Histórico vazio quando Redis desabilitado
  - id: get_recent_history_fallback
    type: io.kestra.plugin.scripts.python.Script
    description: "Histórico vazio (Redis desabilitado)"
    runIf: "{{ vars.enable_redis == false }}"
    beforeCommands:
      - pip install kestra
    script: |
      from kestra import Kestra
      print("⚠️ Redis desabilitado - usando histórico vazio")
      Kestra.outputs({'history': []})

  # 5a. Verificar e atualizar token da Serena API (opcional)
  - id: check-serena-api-token
    type: io.kestra.plugin.scripts.python.Script
    description: "Verificar e atualizar token da Serena API"
    beforeCommands:
      - pip install kestra requests
    env:
      SERENA_API_TOKEN: "{{ secret('SERENA_API_TOKEN') }}"
      SERENA_API_BASE_URL: "https://partnership-service-staging.api.srna.co"
    script: |
      import json
      import os
      import requests
      from kestra import Kestra
      
      # Verificar token atual
      token = os.environ.get("SERENA_API_TOKEN")
      base_url = os.environ.get("SERENA_API_BASE_URL")
      
      # Testar token com uma chamada simples
      headers = {
          "Authorization": f"Bearer {token}",
          "Content-Type": "application/json",
          "Accept": "application/json"
      }
      
      try:
          # Chamada de teste para verificar o token
          # Usando o endpoint de planos que estava com erro 401 nos logs
          test_url = f"{base_url}/distribuited-generation/plans"
          response = requests.get(test_url, headers=headers)
          
          if response.status_code == 200:
              print("✅ Token da Serena API válido")
              token_valid = True
              print(f"✅ Planos disponíveis: {len(response.json())}")
          else:
              print(f"⚠️ Token da Serena API inválido ou expirado (Status: {response.status_code})")
              print(f"⚠️ Resposta: {response.text[:200]}")
              token_valid = False
              
      except Exception as e:
          print(f"❌ Erro ao verificar token: {e}")
          token_valid = False
      
      # Verificar se o token é o mesmo que está nos logs
      expected_token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImQzNDBmZWEyLWM3ZTQtNGY1Ni1hYjdlLTAyMmE5ZDcwNTBiNiIsInBhcnRuZXJUeXBlIjoicGFydG5lcl9ncm91cCIsImlhdCI6MTc0NDgzNzEzOX0.YvvCD-I4GOSPmRduMoXit8Rw05c9ILoiCjhnPMgygO0"
      if token != expected_token:
          print(f"⚠️ Token atual não corresponde ao token esperado")
          print(f"⚠️ Token atual: {token[:20]}...")
          print(f"⚠️ Token esperado: {expected_token[:20]}...")
      else:
          print(f"✅ Token corresponde ao esperado")
      
      Kestra.outputs({
          'token_valid': token_valid,
          'token_status': response.status_code if 'response' in locals() else 0
      })
    allowFailure: true

  # 5. Executar Agente Sílvia com memória
  - id: run-silvia-agent-with-coolify-memory
    type: io.kestra.plugin.scripts.python.Script
    description: "Agente Sílvia com Memória Redis via Coolify"
    beforeCommands:
      - pip install kestra python-dotenv openai redis supabase psycopg2-binary requests langchain langchain-openai langchain-community langchain-core faiss-cpu

    env:
      OPENAI_API_KEY: "{{ secret('OPENAI_API_KEY') }}"
      DB_CONNECTION_STRING: "{{ secret('DB_CONNECTION_STRING') }}"
      SERENA_API_TOKEN: "{{ secret('SERENA_API_TOKEN') }}"
      SERENA_API_BASE_URL: "https://partnership-service-staging.api.srna.co"
      REDIS_URL: "{{ vars.redis_url }}"
      
    inputFiles:
      scripts/agent_orchestrator.py: "{{ read('scripts/agent_orchestrator.py') }}"
      scripts/agent_tools/knowledge_base_tool.py: "{{ read('scripts/agent_tools/knowledge_base_tool.py') }}"
      scripts/agent_tools/faq_data.py: "{{ read('scripts/agent_tools/faq_data.py') }}"
      scripts/agent_tools/serena_tools.py: "{{ read('scripts/agent_tools/serena_tools.py') }}"
      scripts/agent_tools/supabase_agent_tools.py: "{{ read('scripts/agent_tools/supabase_agent_tools.py') }}"
      scripts/serena_api.py: "{{ read('scripts/serena_api.py') }}"
      scripts/__init__.py: "{{ read('scripts/__init__.py') }}"
      scripts/agent_tools/__init__.py: ""

    script: |
      import json
      import os
      from scripts.agent_orchestrator import handle_agent_invocation
      from kestra import Kestra
      
      phone_number = "{{ trigger.body.phone }}"
      user_message = "{{ trigger.body.message }}"
      
      # ✅ Verificar primeiro contato
      first_contact_raw = "{{ outputs.check_first_contact.value | default('null') }}"
      is_first_contact = first_contact_raw in ["null", "", "None", None]
      
      # ✅ Contexto da conversa (com fallback automático)
      conversation_context = {{ (outputs.get_conversation_context.vars.context | default(outputs.get_conversation_context_fallback.vars.context)) | default({}) | json }}
      
      # ✅ Histórico recente (com fallback automático)  
      recent_history = {{ (outputs.get_recent_history.vars.history | default(outputs.get_recent_history_fallback.vars.history)) | default([]) | json }}
      
      # Construir contexto melhorado
      memory_context = {
          "phone_number": phone_number,
          "is_first_contact": is_first_contact,
          "conversation_context": conversation_context,
          "recent_history": recent_history,
          "redis_url": os.getenv("REDIS_URL", ""),
          "total_previous_messages": len(recent_history)
      }
      
      # Log do contexto
      print(f"📱 Processando: {phone_number}")
      print(f"🔄 Primeiro contato: {is_first_contact}")
      print(f"📚 Histórico: {len(recent_history)} mensagens")
      print(f"🎯 Redis: {memory_context['redis_url']}")
      
      # Executar agente
      try:
          result = handle_agent_invocation(phone_number, user_message)
          response = result.get('response', 'Desculpe, ocorreu um erro interno.')
      except Exception as e:
          print(f"❌ Erro no agente: {e}")
          response = "Desculpe, estou com dificuldades técnicas no momento. Tente novamente em alguns minutos."
      
      # Saída otimizada
      Kestra.outputs({
          'response': response,
          'memory_context': memory_context,
          'performance': {
              'redis_connected': bool(memory_context['redis_url']),
              'context_loaded': bool(conversation_context),
              'history_loaded': len(recent_history) > 0
          }
      })

  # 6. Marcar primeiro contato (KV Store)
  - id: mark_first_contact
    type: io.kestra.plugin.core.kv.Set
    key: "first_contact_{{ trigger.body.phone }}"
    value: "{{ now() }}"
    runIf: "{{ outputs['check_first_contact'].value == null }}"

  # 7. Atualizar contexto no Redis (via Coolify)
  - id: update_context_in_coolify_redis
    type: io.kestra.plugin.scripts.python.Script
    description: "Atualizar contexto no Redis"
    runIf: "{{ vars.enable_redis }}"
    beforeCommands:
      - pip install redis
    env:
      REDIS_URL: "{{ vars.redis_url }}"
      PHONE_KEY: "silvia_context_{{ trigger.body.phone }}"
      PHONE_NUMBER: "{{ trigger.body.phone }}"
      USER_MESSAGE: "{{ trigger.body.message }}"
      IS_FIRST_CONTACT: "{{ outputs['run-silvia-agent-with-coolify-memory'].vars.memory_context.is_first_contact }}"
    script: |
      import redis
      import json
      import os
      from datetime import datetime
      
      try:
          redis_client = redis.from_url(os.getenv('REDIS_URL'))
          phone_key = os.getenv('PHONE_KEY')
          
          context_data = {
              "phone": os.getenv('PHONE_NUMBER'),
              "last_interaction": datetime.now().isoformat(),
              "conversation_state": "active",
              "total_messages": 1,  # Será incrementado
              "first_contact": os.getenv('IS_FIRST_CONTACT') == 'True',
              "redis_source": "coolify_redis",
              "last_message_preview": os.getenv('USER_MESSAGE', '')[:50]
          }
          
          redis_client.set(phone_key, json.dumps(context_data))
          print(f"✅ Contexto atualizado para {phone_key}")
          
      except Exception as e:
          print(f"❌ Erro ao atualizar contexto: {e}")
    allowFailure: true

  # 8. Adicionar ao histórico (Redis List via Coolify)
  - id: add_to_coolify_redis_history
    type: io.kestra.plugin.scripts.python.Script
    description: "Adicionar ao histórico Redis"
    runIf: "{{ vars.enable_redis }}"
    beforeCommands:
      - pip install redis
    env:
      REDIS_URL: "{{ vars.redis_url }}"
      HISTORY_KEY: "silvia_history_{{ trigger.body.phone }}"
      USER_MESSAGE: "{{ trigger.body.message }}"
      AI_RESPONSE: "{{ outputs['run-silvia-agent-with-coolify-memory'].vars.response }}"
    script: |
      import redis
      import json
      import os
      from datetime import datetime
      import uuid
      
      try:
          redis_client = redis.from_url(os.getenv('REDIS_URL'))
          history_key = os.getenv('HISTORY_KEY')
          
          exchange_data = {
              "exchange_id": str(uuid.uuid4()),
              "user": os.getenv('USER_MESSAGE'),
              "assistant": os.getenv('AI_RESPONSE'),
              "timestamp": datetime.now().isoformat(),
              "source": "coolify_redis"
          }
          
          redis_client.rpush(history_key, json.dumps(exchange_data))
          print(f"✅ Histórico atualizado para {history_key}")
          
          # Manter apenas últimas 15 mensagens
          redis_client.ltrim(history_key, -15, -1)
          
      except Exception as e:
          print(f"❌ Erro ao atualizar histórico: {e}")
    allowFailure: true
    
  # 9. Salvar log estruturado (opcional - PostgreSQL)
  - id: log_to_supabase
    type: io.kestra.plugin.jdbc.postgresql.Query
    url: "jdbc:{{ secret('DB_CONNECTION_STRING') }}"
    sql: |
      INSERT INTO conversation_logs (
        phone_number,
        user_message,
        ai_response,
        context_data,
        redis_source,
        created_at
      ) VALUES (
        '{{ trigger.body.phone }}',
        '{{ trigger.body.message }}',
        '{{ outputs["run-silvia-agent-with-coolify-memory"].vars.response }}',
        '{{ outputs["run-silvia-agent-with-coolify-memory"].vars.memory_context | json }}',
        'coolify_redis',
        NOW()
      )
    allowFailure: true

  # 10. Preparar mensagem WhatsApp (escapar caracteres especiais)
  - id: prepare-whatsapp-message
    type: io.kestra.plugin.scripts.python.Script
    description: "Preparar mensagem WhatsApp (escapar caracteres especiais)"
    beforeCommands:
      - pip install kestra
    script: |
      import json
      from kestra import Kestra
      
      # Obter resposta do agente
      response = """{{ outputs['run-silvia-agent-with-coolify-memory'].vars.response }}"""
      phone = "{{ trigger.body.phone }}"
      
      # Criar payload JSON com resposta escapada corretamente
      whatsapp_payload = {
          "messaging_product": "whatsapp",
          "to": phone,
          "type": "text",
          "text": {"body": response}
      }
      
      # Converter para JSON válido (isso escapa automaticamente os caracteres especiais)
      whatsapp_json = json.dumps(whatsapp_payload)
      
      print(f"✅ Mensagem preparada para: {phone}")
      print(f"📱 Tamanho da mensagem: {len(response)} caracteres")
      
      Kestra.outputs({
          'whatsapp_payload': whatsapp_json
      })
    runIf: "{{ outputs['run-silvia-agent-with-coolify-memory'].exitCode == 0 and outputs['run-silvia-agent-with-coolify-memory'].vars.response != null and outputs['run-silvia-agent-with-coolify-memory'].vars.response != '' }}"

  # 11. Enviar WhatsApp (com payload JSON escapado)
  - id: send-whatsapp-reply
    type: io.kestra.plugin.core.http.Request
    uri: "https://graph.facebook.com/v20.0/599096403294262/messages"
    method: POST
    headers:
      Authorization: "Bearer {{ secret('WHATSAPP_API_TOKEN') }}"
      Content-Type: "application/json"
    body: "{{ outputs['prepare-whatsapp-message'].vars.whatsapp_payload }}"
    runIf: "{{ outputs['prepare-whatsapp-message'].exitCode == 0 }}"
    allowFailure: true

  # 12. Verificar status do envio WhatsApp
  - id: check-whatsapp-status
    type: io.kestra.plugin.scripts.python.Script
    description: "Verificar status do envio WhatsApp"
    beforeCommands:
      - pip install kestra
    script: |
      import json
      from kestra import Kestra
      
      # Verificar se o envio foi bem-sucedido
      try:
          status_code = {{ outputs['send-whatsapp-reply'].vars.statusCode | default(0) }}
          response_body = """{{ outputs['send-whatsapp-reply'].vars.body | default('{}') }}"""
          
          if status_code >= 200 and status_code < 300:
              print(f"✅ Mensagem WhatsApp enviada com sucesso! Status: {status_code}")
              success = True
          else:
              print(f"❌ Falha ao enviar mensagem WhatsApp. Status: {status_code}")
              print(f"📄 Resposta: {response_body}")
              success = False
              
      except Exception as e:
          print(f"❌ Erro ao verificar status: {e}")
          success = False
      
      Kestra.outputs({
          'whatsapp_success': success
      })
    runIf: "{{ outputs['send-whatsapp-reply'].exitCode != null }}"
    allowFailure: true

  # 13. Log consolidado
  - id: log-coolify-redis-result
    type: io.kestra.plugin.core.log.Log
    message: |
      [SILVIA-COOLIFY-REDIS] {{ trigger.body.phone }} - 
      Primeiro: {{ outputs['run-silvia-agent-with-coolify-memory'].vars.memory_context.is_first_contact }} | 
      Histórico: {{ outputs['run-silvia-agent-with-coolify-memory'].vars.memory_context.total_previous_messages }}msgs | 
      Redis: {{ outputs['run-silvia-agent-with-coolify-memory'].vars.performance.redis_connected ? 'OK' : 'FAIL' }} | 
      Context: {{ outputs['run-silvia-agent-with-coolify-memory'].vars.performance.context_loaded ? 'OK' : 'EMPTY' }} | 
      Status: {{ outputs['run-silvia-agent-with-coolify-memory'].exitCode == 0 ? 'SUCCESS' : 'ERROR' }} 