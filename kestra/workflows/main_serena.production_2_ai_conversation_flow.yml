id: 2_ai_conversation_flow
namespace: serena.production
description: "Workflow de conversa√ß√£o com IA v3 - Processa mensagens do lead e inicia conversa inteligente"

triggers:
  - id: converse_production_lead
    type: io.kestra.plugin.core.trigger.Webhook
    key: converse_production_lead
    description: "Recebe mensagens do lead para iniciar conversa com IA"

variables:
  # Configura√ß√µes do modelo de IA
  ai_model: "gpt-4o-mini"
  max_tokens: 300
  temperature: 0.7

tasks:
  # Tarefa: Processar mensagem e iniciar conversa com IA
  - id: process-lead-message
    type: io.kestra.plugin.scripts.python.Script
    description: "Processa mensagem do lead e envia primeira resposta da IA"
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: serena/kestra-python-runner:latest
      pullPolicy: NEVER
      networkMode: serena-qualifier_kestra-network
    
    # Passa as vari√°veis de ambiente do arquivo .env
    env:
      OPENAI_API_KEY: "{{ envs.openai_api_key }}"
      WHATSAPP_API_TOKEN: "{{ envs.whatsapp_api_token }}"
      WHATSAPP_PHONE_NUMBER_ID: "{{ envs.whatsapp_phone_number_id }}"
      SUPABASE_URL: "{{ envs.supabase_url }}"
      SUPABASE_KEY: "{{ envs.supabase_key }}"
      SERENA_API_TOKEN: "{{ envs.serena_api_token }}"
    
    script: |
      import sys
      sys.path.append('/app')
      
      # Importa o handler de conversa√ß√£o
      from scripts.ai_conversation_handler import handle_lead_message
      
      # Dados do trigger (mensagem do lead)
      phone_number = '{{ trigger.body.phone }}'
      message = '{{ trigger.body.message }}'
      
      # Log da mensagem recebida
      print(f"üì± Mensagem recebida de {phone_number}")
      print(f"üí¨ Conte√∫do: {message}")
      
      # Processa mensagem e envia resposta
      result = handle_lead_message(
          phone_number=phone_number,
          message=message,
          ai_model='{{ vars.ai_model }}',
          max_tokens={{ vars.max_tokens }},
          temperature={{ vars.temperature }}
      )
      
      # Outputs para logging
      print(f"::set-output name=response_sent::{result['success']}")
      print(f"::set-output name=ai_response::{result.get('ai_response', 'N/A')}")
      print(f"::set-output name=whatsapp_message_id::{result.get('whatsapp_message_id', 'N/A')}")
      print(f"::set-output name=lead_phone::{phone_number}")

  # Log de sucesso da conversa
  - id: log-conversation-success
    type: io.kestra.plugin.core.log.Log
    description: "Registra sucesso do processamento da conversa"
    runIf: "{{ outputs['process-lead-message'].vars.response_sent == 'True' }}"
    message: |
      ‚úÖ CONVERSA COM IA INICIADA COM SUCESSO
      =====================================
      Phone: {{ trigger.body.phone }}
      Message Received: {{ trigger.body.message }}
      AI Response: {{ outputs['process-lead-message'].vars.ai_response }}
      WhatsApp Message ID: {{ outputs['process-lead-message'].vars.whatsapp_message_id }}
      Model Used: {{ vars.ai_model }}
      Timestamp: {{ execution.startDate }}
      
      O lead deve receber a solicita√ß√£o de cidade e estado para prosseguir.

  # Log de erro no processamento
  - id: log-conversation-error
    type: io.kestra.plugin.core.log.Log
    description: "Registra erro no processamento da conversa"
    runIf: "{{ outputs['process-lead-message'].vars.response_sent != 'True' }}"
    level: ERROR
    message: |
      ‚ùå ERRO NO PROCESSAMENTO DA CONVERSA COM IA
      ==========================================
      Phone: {{ trigger.body.phone }}
      Message Received: {{ trigger.body.message }}
      Model: {{ vars.ai_model }}
      Timestamp: {{ execution.startDate }}
      
      Verificar logs do AI handler e configura√ß√µes da OpenAI API. 