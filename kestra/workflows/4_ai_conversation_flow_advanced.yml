id: 4_ai_conversation_flow_advanced
namespace: serena.production
description: "Workflow avan√ßado de conversa√ß√£o com IA - Usa plugin Responses com output estruturado e conversas com estado"

triggers:
  - id: converse_production_lead_advanced
    type: io.kestra.plugin.core.trigger.Webhook
    key: converse_production_lead_advanced
    description: "Recebe mensagens do lead para conversa avan√ßada com IA"

variables:
  # Configura√ß√µes do modelo de IA
  ai_model: "gpt-4o-mini"
  max_tokens: 500
  temperature: 0.7

tasks:
  # Tarefa: An√°lise inteligente da mensagem com output estruturado
  - id: analyze-lead-message
    type: io.kestra.plugin.openai.Responses
    description: "Analisa mensagem do lead com output estruturado"
    apiKey: "{{ secret('SECRET_OPENAI_API_KEY') }}"
    model: "{{ vars.ai_model }}"
    maxOutputTokens: "{{ vars.max_tokens }}"
    temperature: "{{ vars.temperature }}"
    store: false  # N√£o armazenar no OpenAI para este exemplo
    
    # Configura√ß√£o de output estruturado
    text:
      format:
        type: json_schema
        name: lead_analysis
        schema:
          type: object
          properties:
            lead_info:
              type: object
              description: "Informa√ß√µes extra√≠das do lead"
              properties:
                urgency_level:
                  type: string
                  description: "N√≠vel de urg√™ncia da mensagem"
                  enum: ["baixa", "media", "alta", "urgente"]
                interest_level:
                  type: string
                  description: "N√≠vel de interesse demonstrado"
                  enum: ["baixo", "medio", "alto", "muito_alto"]
                business_type:
                  type: string
                  description: "Tipo de neg√≥cio identificado"
                location_mentioned:
                  type: boolean
                  description: "Se mencionou localiza√ß√£o"
                budget_mentioned:
                  type: boolean
                  description: "Se mencionou or√ßamento"
              required: ["urgency_level", "interest_level", "business_type"]
            response_strategy:
              type: object
              description: "Estrat√©gia de resposta recomendada"
              properties:
                approach:
                  type: string
                  description: "Abordagem recomendada"
                  enum: ["consultiva", "direta", "educativa", "personalizada"]
                next_question:
                  type: string
                  description: "Pr√≥xima pergunta a fazer"
                priority:
                  type: string
                  description: "Prioridade de resposta"
                  enum: ["imediata", "rapida", "normal", "quando_possivel"]
              required: ["approach", "next_question", "priority"]
            ai_response:
              type: string
              description: "Resposta personalizada da IA para o lead"
          required: ["lead_info", "response_strategy", "ai_response"]
    
    input: |
      Voc√™ √© Serena, assistente inteligente de qualifica√ß√£o de leads da Serena Energia.
      
      Analise a mensagem do lead e forne√ßa:
      1. An√°lise detalhada do perfil do lead
      2. Estrat√©gia de resposta personalizada
      3. Resposta amig√°vel e profissional
      
      Mensagem do lead: "{{ trigger.body.message }}"
      Telefone do lead: {{ trigger.body.phone }}
      
      Baseie sua an√°lise no contexto de uma empresa de energia solar fotovoltaica que oferece:
      - Instala√ß√£o de sistemas solares residenciais e comerciais
      - An√°lise de viabilidade econ√¥mica
      - Financiamento e facilidades de pagamento
      - Acompanhamento p√≥s-instala√ß√£o
      
      Foque em identificar interesse em economia na conta de luz e sustentabilidade.

  # Tarefa: Enviar mensagem WhatsApp baseada na an√°lise
  - id: send-intelligent-response
    type: io.kestra.plugin.scripts.python.Script
    description: "Envia resposta inteligente via WhatsApp"
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: python:3.11-slim
    
    env:
      WHATSAPP_API_TOKEN: "{{ secret('SECRET_WHATSAPP_API_TOKEN') }}"
      WHATSAPP_PHONE_NUMBER_ID: "{{ envs.whatsapp_phone_number_id }}"
      SERENA_API_TOKEN: "{{ secret('SECRET_SERENA_API_TOKEN') }}"
      SERENA_API_BASE_URL: "{{ envs.serena_api_base_url }}"
    
    beforeCommands:
      - pip install requests
    
    script: |
      import requests
      import json
      import os
      
      # Dados do trigger e an√°lise
      phone_number = '{{ trigger.body.phone }}'
      analysis_raw = '''{{ outputs['analyze-lead-message'].outputText }}'''
      
      # Parse da an√°lise estruturada
      try:
          analysis = json.loads(analysis_raw)
          ai_response = analysis['ai_response']
          urgency = analysis['lead_info']['urgency_level']
          interest = analysis['lead_info']['interest_level']
          priority = analysis['response_strategy']['priority']
          
          print(f"üìä An√°lise do Lead:")
          print(f"   Urg√™ncia: {urgency}")
          print(f"   Interesse: {interest}")
          print(f"   Prioridade: {priority}")
          
      except json.JSONDecodeError as e:
          print(f"‚ö†Ô∏è Erro ao processar an√°lise: {e}")
          ai_response = "Obrigado pelo seu interesse! Em breve entraremos em contato."
      
      # Configura√ß√£o WhatsApp API (v23.0)
      whatsapp_token = os.getenv('WHATSAPP_API_TOKEN')
      whatsapp_phone_id = os.getenv('WHATSAPP_PHONE_NUMBER_ID')
      
      # Validar vari√°veis obrigat√≥rias
      if not whatsapp_token or not whatsapp_phone_id:
          error_msg = "Vari√°veis WHATSAPP_API_TOKEN ou WHATSAPP_PHONE_NUMBER_ID n√£o configuradas"
          print(f"‚ùå {error_msg}")
          with open('/tmp/outputs.json', 'w') as f:
              json.dump({
                  'success': False,
                  'error': error_msg,
                  'phone_number': phone_number
              }, f)
          raise ValueError(error_msg)
      
      url = f"https://graph.facebook.com/v23.0/{whatsapp_phone_id}/messages"
      headers = {
          'Authorization': f"Bearer {whatsapp_token}",
          'Content-Type': 'application/json'
      }
      
      # Payload da mensagem
      payload = {
          "messaging_product": "whatsapp",
          "to": phone_number,
          "type": "text",
          "text": {
              "body": ai_response
          }
      }
      
      # Enviar mensagem
      try:
          response = requests.post(url, headers=headers, json=payload)
          response.raise_for_status()
          
          result = response.json()
          message_id = result.get('messages', [{}])[0].get('id', 'unknown')
          
          print(f"‚úÖ Mensagem inteligente enviada!")
          print(f"üì± WhatsApp Message ID: {message_id}")
          print(f"ü§ñ Resposta: {ai_response}")
          
          # Output para pr√≥ximos tasks
          with open('/tmp/outputs.json', 'w') as f:
              json.dump({
                  'success': True,
                  'whatsapp_message_id': message_id,
                  'ai_response': ai_response,
                  'phone_number': phone_number,
                  'analysis': analysis_raw
              }, f)
              
      except requests.RequestException as e:
          print(f"‚ùå Erro ao enviar mensagem WhatsApp: {str(e)}")
          with open('/tmp/outputs.json', 'w') as f:
              json.dump({
                  'success': False,
                  'error': str(e),
                  'phone_number': phone_number
              }, f)
          raise

  # Tarefa: Classificar e rotear lead baseado na an√°lise
  - id: classify-and-route-lead
    type: io.kestra.plugin.scripts.python.Script
    description: "Classifica lead e define roteamento"
    runIf: "{{ outputs['send-intelligent-response'].success }}"
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: python:3.11-slim
    
    script: |
      import json
      
      # Parse da an√°lise
      analysis_raw = '''{{ outputs['analyze-lead-message'].outputText }}'''
      
      try:
          analysis = json.loads(analysis_raw)
          lead_info = analysis['lead_info']
          strategy = analysis['response_strategy']
          
          # L√≥gica de classifica√ß√£o
          if lead_info['urgency_level'] in ['alta', 'urgente']:
              lead_class = 'hot_lead'
              action = 'notify_sales_team'
          elif lead_info['interest_level'] in ['alto', 'muito_alto']:
              lead_class = 'warm_lead'
              action = 'schedule_follow_up'
          else:
              lead_class = 'cold_lead'
              action = 'nurture_campaign'
          
          # Definir pr√≥ximas a√ß√µes
          next_actions = {
              'hot_lead': 'Notificar equipe comercial imediatamente',
              'warm_lead': 'Agendar follow-up em 2 horas',
              'cold_lead': 'Incluir em campanha de nutri√ß√£o'
          }
          
          result = {
              'lead_classification': lead_class,
              'recommended_action': action,
              'next_steps': next_actions[lead_class],
              'analysis_summary': {
                  'urgency': lead_info['urgency_level'],
                  'interest': lead_info['interest_level'],
                  'priority': strategy['priority']
              }
          }
          
          print(f"üéØ Classifica√ß√£o do Lead: {lead_class}")
          print(f"üìã A√ß√£o Recomendada: {action}")
          print(f"‚û°Ô∏è Pr√≥ximos Passos: {next_actions[lead_class]}")
          
          # Salvar resultado
          with open('/tmp/outputs.json', 'w') as f:
              json.dump(result, f)
              
      except json.JSONDecodeError as e:
          print(f"‚ö†Ô∏è Erro ao processar an√°lise: {e}")
          with open('/tmp/outputs.json', 'w') as f:
              json.dump({
                  'lead_classification': 'unclassified',
                  'recommended_action': 'manual_review',
                  'error': str(e)
              }, f)

  # Log detalhado de sucesso
  - id: log-detailed-success
    type: io.kestra.plugin.core.log.Log
    description: "Log detalhado do sucesso da conversa"
    runIf: "{{ outputs['send-intelligent-response'].success }}"
    message: |
      ‚úÖ CONVERSA INTELIGENTE COM IA CONCLU√çDA
      =======================================
      üì± Phone: {{ trigger.body.phone }}
      üí¨ Message: {{ trigger.body.message }}
      ü§ñ AI Response: {{ fromJson(outputs['analyze-lead-message'].outputText).ai_response }}
      üìä Lead Classification: {{ outputs['classify-and-route-lead'].lead_classification }}
      üéØ Recommended Action: {{ outputs['classify-and-route-lead'].recommended_action }}
      ‚è±Ô∏è Urgency Level: {{ fromJson(outputs['analyze-lead-message'].outputText).lead_info.urgency_level }}
      üí° Interest Level: {{ fromJson(outputs['analyze-lead-message'].outputText).lead_info.interest_level }}
      üìã Strategy: {{ fromJson(outputs['analyze-lead-message'].outputText).response_strategy.approach }}
      üîÑ Next Steps: {{ outputs['classify-and-route-lead'].next_steps }}
      üì± WhatsApp ID: {{ outputs['send-intelligent-response'].whatsapp_message_id }}
      üïê Timestamp: {{ execution.startDate }}
      
      üîó Webhook URL: https://kestra.darwinai.com.br/api/v1/executions/webhook/serena.production/converse_production_lead_advanced
      
      üß† AN√ÅLISE COMPLETA:
      {{ outputs['analyze-lead-message'].outputText }}

  # Log de erro
  - id: log-error
    type: io.kestra.plugin.core.log.Log
    description: "Log de erro no processamento"
    runIf: "{{ !outputs['send-intelligent-response'].success }}"
    level: ERROR
    message: |
      ‚ùå ERRO NO PROCESSAMENTO DA CONVERSA INTELIGENTE
      ===============================================
      Phone: {{ trigger.body.phone }}
      Message: {{ trigger.body.message }}
      Error: {{ outputs['send-intelligent-response'].error }}
      Model: {{ vars.ai_model }}
      Timestamp: {{ execution.startDate }} 