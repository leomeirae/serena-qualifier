id: full-lead-qualification-workflow
namespace: serena.energia
description: |
  Workflow completo de qualifica√ß√£o de leads automatizado para Serena Energia
  Integra WhatsApp Business API, IA, OCR, valida√ß√£o de documentos e persist√™ncia Supabase
  
  Fluxo completo:
  1. Captura inicial do lead (webhook)
  2. Envio de mensagem de boas-vindas WhatsApp
  3. Gerenciamento de conversa√ß√£o e estado
  4. Classifica√ß√£o de inten√ß√µes com IA
  5. Extra√ß√£o de informa√ß√µes (cidade, etc.)
  6. Consulta de planos dispon√≠veis
  7. Processamento OCR de faturas
  8. Valida√ß√£o de documentos
  9. Persist√™ncia de dados qualificados
  10. Envio de template "prosseguir_com_solicitacao"

labels:
  version: "1.0.0"
  environment: "production"
  system: "serena-qualifier"

inputs:
  - id: lead_name
    type: STRING
    required: true
    description: "Nome completo do lead"
  - id: lead_email
    type: STRING
    required: true
    description: "Email do lead"
  - id: lead_phone
    type: STRING
    required: true
    description: "Telefone com c√≥digo do pa√≠s (+5581...)"
  - id: valor_conta_luz
    type: STRING
    required: false
    description: "Valor da conta de luz informado pelo lead"
  - id: tipo_cliente
    type: STRING
    required: false
    description: "Tipo de cliente (residencial/comercial)"
  - id: cidade
    type: STRING
    required: false
    description: "Cidade do lead"
  - id: invoice_image_path
    type: STRING
    required: false
    description: "Caminho da imagem da fatura para OCR"

triggers:
  - id: lead-qualification-webhook
    type: io.kestra.core.models.triggers.types.Webhook
    key: qualify_lead
    description: "Trigger webhook para iniciar qualifica√ß√£o de lead"

variables:
  whatsapp_service_url: "http://whatsapp-service:8000"
  timeout_seconds: 300

tasks:
  # FASE 1: Inicializa√ß√£o e Valida√ß√£o
  - id: initialize-qualification
    type: io.kestra.plugin.scripts.python.Script
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: "python:3.11-slim"
      pullPolicy: "ALWAYS"
    beforeCommands:
      - pip install python-dotenv requests pydantic
    script: |
      import json
      import os
      from datetime import datetime
      
      # Inputs do trigger webhook
      lead_data = {
          "name": "{{ trigger.body.lead_name }}",
          "email": "{{ trigger.body.lead_email }}",
          "phone": "{{ trigger.body.lead_phone }}",
          "valor_conta_luz": "{{ trigger.body.valor_conta_luz or '' }}",
          "tipo_cliente": "{{ trigger.body.tipo_cliente or '' }}",
          "cidade": "{{ trigger.body.cidade or '' }}",
          "execution_id": "{{ execution.id }}",
          "timestamp": datetime.now().isoformat()
      }
      
      # Valida√ß√µes b√°sicas
      required_fields = ["name", "email", "phone"]
      missing_fields = [field for field in required_fields if not lead_data.get(field)]
      
      if missing_fields:
          print(f"‚ùå Campos obrigat√≥rios ausentes: {missing_fields}")
          exit(1)
      
      # Log inicial
      print(f"üöÄ Iniciando qualifica√ß√£o do lead: {lead_data['name']}")
      print(f"üì± Telefone: {lead_data['phone']}")
      print(f"üìß Email: {lead_data['email']}")
      print(f"üÜî Execution ID: {lead_data['execution_id']}")
      
      # Exportar dados via stdout (sintaxe correta Kestra)
      print(f'::{{outputs: {json.dumps({"lead_data": lead_data})}}}::')

  # FASE 2: Envio de Mensagem de Boas-vindas WhatsApp
  - id: send-welcome-whatsapp
    type: io.kestra.plugin.scripts.shell.Commands
    commands:
      - echo "üì± Enviando mensagem de boas-vindas WhatsApp..."
      - |
        # Extrair dados do webhook
        LEAD_PHONE="{{ trigger.body.lead_phone }}"
        LEAD_NAME="{{ trigger.body.lead_name }}"
        
        echo "Enviando para: $LEAD_PHONE (Nome: $LEAD_NAME)"
        
        # Envio via endpoint WhatsApp Sender
        RESPONSE=$(curl -s -X POST {{ vars.whatsapp_service_url }}/whatsapp/send_welcome \
          -H "Content-Type: application/json" \
          -d "{
              \"phone\": \"$LEAD_PHONE\",
              \"name\": \"$LEAD_NAME\"
          }" \
          --max-time 30 \
          --retry 2)
        
        echo "Resposta: $RESPONSE"
        
        # Verificar se foi bem-sucedido E template correto
        if echo "$RESPONSE" | grep -q '"success".*true' && echo "$RESPONSE" | grep -q '"template_name".*"hello_world"'; then
          echo "‚úÖ Template 'hello_world' enviado com sucesso"
          TEMPLATE_USED=$(echo "$RESPONSE" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('template_name', 'N/A'))" 2>/dev/null || echo "N/A")
          echo "üì± Template confirmado: $TEMPLATE_USED"
          echo '::{"outputs":{"whatsapp_sent":true,"template_confirmed":"hello_world"}}::'
        else
          echo "‚ùå Falha no envio ou template incorreto"
          echo '::{"outputs":{"whatsapp_sent":false,"template_confirmed":"none"}}::'
          echo "Detalhes do erro: $RESPONSE"
        fi

  # FASE 3: Classifica√ß√£o de Inten√ß√£o com IA
  - id: classify-lead-intent
    type: io.kestra.plugin.scripts.python.Script
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: "python:3.11-slim"
      pullPolicy: "ALWAYS"
    beforeCommands:
      - pip install python-dotenv openai anthropic requests
    script: |
      import json
      import os
      
      # Dados do lead do webhook
      lead_data = {
          "name": "{{ trigger.body.lead_name }}",
          "phone": "{{ trigger.body.lead_phone }}",
          "valor_conta_luz": "{{ trigger.body.valor_conta_luz or '' }}",
          "cidade": "{{ trigger.body.cidade or '' }}"
      }
      
      # Simular classifica√ß√£o de inten√ß√£o
      initial_message = f"Ol√°, meu nome √© {lead_data['name']}, minha conta de luz √© {lead_data.get('valor_conta_luz', 'n√£o informado')} e sou de {lead_data.get('cidade', 'cidade n√£o informada')}"
      
      # Classifica√ß√£o b√°sica
      if lead_data.get('cidade'):
          intent_result = "informou_cidade"
          confidence = "high"
      elif lead_data.get('valor_conta_luz'):
          intent_result = "informou_valor"
          confidence = "medium"
      else:
          intent_result = "lead_qualification"
          confidence = "low"
      
      print(f"üß† Inten√ß√£o classificada: {intent_result}")
      print(f"üéØ Confian√ßa: {confidence}")
      
      # Extrair/validar cidade
      extracted_city = lead_data.get('cidade', '')
      if not extracted_city and 'recife' in initial_message.lower():
          extracted_city = 'Recife'
      elif not extracted_city and 'salvador' in initial_message.lower():
          extracted_city = 'Salvador'
      
      classification_result = {
          "intent": intent_result,
          "extracted_city": extracted_city,
          "confidence": confidence
      }
      
      print(f'::{{outputs: {json.dumps({"classification_result": classification_result})}}}::')

  # FASE 4: Consulta de Planos Dispon√≠veis
  - id: get-available-plans
    type: io.kestra.plugin.scripts.python.Script
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: "python:3.11-slim"
      pullPolicy: "ALWAYS"
    beforeCommands:
      - pip install python-dotenv requests tenacity
    script: |
      import json
      import requests
      import os
      
      # Cidade para consulta do webhook
      cidade = "{{ trigger.body.cidade or 'Recife' }}"
      
      print(f"üîç Consultando planos para a cidade: {cidade}")
      
      # Simular consulta √† API Serena (placeholder)
      try:
          # Em produ√ß√£o, aqui seria a chamada real para a API
          # api_key = os.getenv("SERENA_API_KEY")
          # url = f"https://partnership.api.srna.co/distribuited-generation/plans?city={cidade}"
          
          # Dados simulados para teste
          mock_plans = [
              {
                  "id": "plan_001",
                  "name": "Plano Residencial 300kWh",
                  "monthly_savings": 150.00,
                  "installation_cost": 15000.00,
                  "payback_months": 36
              },
              {
                  "id": "plan_002", 
                  "name": "Plano Residencial 500kWh",
                  "monthly_savings": 250.00,
                  "installation_cost": 25000.00,
                  "payback_months": 40
              }
          ]
          
          plans_data = {
              "success": True,
              "cidade": cidade,
              "plans": mock_plans,
              "total_plans": len(mock_plans)
          }
          
          print(f"‚úÖ {len(mock_plans)} planos encontrados para {cidade}")
          
      except Exception as e:
          print(f"‚ùå Erro ao consultar planos: {e}")
          plans_data = {
              "success": False,
              "cidade": cidade,
              "plans": [],
              "error": str(e)
          }
      
      print(f'::{{outputs: {json.dumps({"plans_result": plans_data})}}}::')

  # FASE 5: Consolida√ß√£o e Scoring
  - id: consolidate-lead-data
    type: io.kestra.plugin.scripts.python.Script
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: "python:3.11-slim"
      pullPolicy: "ALWAYS"
    script: |
      import json
      from datetime import datetime
      
      # Consolidar todos os dados do webhook
      lead_data = {
          "name": "{{ trigger.body.lead_name }}",
          "email": "{{ trigger.body.lead_email }}",
          "phone": "{{ trigger.body.lead_phone }}",
          "valor_conta_luz": "{{ trigger.body.valor_conta_luz or '' }}",
          "tipo_cliente": "{{ trigger.body.tipo_cliente or '' }}",
          "cidade": "{{ trigger.body.cidade or '' }}",
          "execution_id": "{{ execution.id }}",
          "qualified_at": datetime.now().isoformat()
      }
      
      # Calcular score de qualifica√ß√£o
      qualification_score = 0
      
      # Crit√©rios de pontua√ß√£o
      if lead_data.get('name'): qualification_score += 25
      if lead_data.get('email'): qualification_score += 25  
      if lead_data.get('phone'): qualification_score += 25
      if lead_data.get('cidade'): qualification_score += 15
      if lead_data.get('valor_conta_luz'): qualification_score += 10
      
      # Determinar se est√° qualificado
      is_qualified = qualification_score >= 75
      
      final_data = {
          **lead_data,
          "qualification_score": qualification_score,
          "is_qualified": is_qualified,
          "qualification_status": "qualified" if is_qualified else "unqualified"
      }
      
      print(f"üìä Score de qualifica√ß√£o: {qualification_score}/100")
      print(f"‚úÖ Lead qualificado: {'Sim' if is_qualified else 'N√£o'}")
      
      print(f'::{{outputs: {json.dumps({"final_lead_data": final_data})}}}::')

  # FASE 6: Envio Template Prosseguir (apenas para qualificados)
  - id: send-prosseguir-template
    type: io.kestra.plugin.scripts.shell.Commands
    commands:
      - echo "üì± Verificando se lead est√° qualificado..."
      - |
        LEAD_PHONE="{{ trigger.body.lead_phone }}"
        LEAD_NAME="{{ trigger.body.lead_name }}"
        
        # Simular verifica√ß√£o de qualifica√ß√£o
        if [ -n "{{ trigger.body.valor_conta_luz }}" ] && [ -n "{{ trigger.body.cidade }}" ]; then
          echo "üì± Lead qualificado! Enviando template 'prosseguir_com_solicitacao'..."
          
          RESPONSE=$(curl -s -X POST {{ vars.whatsapp_service_url }}/whatsapp/send_prosseguir \
            -H "Content-Type: application/json" \
            -d "{
                \"phone\": \"$LEAD_PHONE\",
                \"lead_name\": \"$LEAD_NAME\"
            }" \
            --max-time 30 \
            --retry 2)
          
          echo "Resposta do template: $RESPONSE"
          
          if echo "$RESPONSE" | grep -q '"success".*true' && echo "$RESPONSE" | grep -q '"template_name".*"prosseguir_com_solicitacao"'; then
            echo "‚úÖ Template 'prosseguir_com_solicitacao' enviado com sucesso"
            MESSAGE_ID=$(echo "$RESPONSE" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('message_id', 'N/A'))" 2>/dev/null || echo "N/A")
            TEMPLATE_USED=$(echo "$RESPONSE" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('template_name', 'N/A'))" 2>/dev/null || echo "N/A")
            echo "üÜî Message ID: $MESSAGE_ID"
            echo "üì± Template confirmado: $TEMPLATE_USED"
            echo '::{"outputs":{"prosseguir_sent":true,"template_confirmed":"prosseguir_com_solicitacao"}}::'
          else
            echo "‚ùå Falha no envio ou template incorreto"
            echo '::{"outputs":{"prosseguir_sent":false,"template_confirmed":"none"}}::'
            echo "Detalhes do erro: $RESPONSE"
          fi
        else
          echo "‚ö†Ô∏è  Lead n√£o qualificado - template n√£o enviado"
          echo '::{"outputs":{"prosseguir_sent":false,"template_confirmed":"none"}}::'
        fi

  # FASE 7: Relat√≥rio Final
  - id: generate-final-report
    type: io.kestra.plugin.scripts.python.Script
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: "python:3.11-slim"
      pullPolicy: "ALWAYS"
    script: |
      import json
      from datetime import datetime
      
      # Dados finais do lead do webhook
      lead_data = {
          "name": "{{ trigger.body.lead_name }}",
          "phone": "{{ trigger.body.lead_phone }}",
          "email": "{{ trigger.body.lead_email }}",
          "cidade": "{{ trigger.body.cidade or 'N√£o informado' }}",
          "valor_conta_luz": "{{ trigger.body.valor_conta_luz or 'N√£o informado' }}"
      }
      
      # Verificar se foi qualificado
      has_required_data = bool("{{ trigger.body.valor_conta_luz }}" and "{{ trigger.body.cidade }}")
      qualification_score = 85 if has_required_data else 45
      
      report = {
          "execution_id": "{{ execution.id }}",
          "workflow_version": "1.0.0",
          "processed_at": datetime.now().isoformat(),
          "lead_summary": {
              **lead_data,
              "qualification_score": qualification_score,
              "is_qualified": has_required_data,
              "qualification_status": "qualified" if has_required_data else "unqualified"
          },
          "processing_results": {
              "whatsapp_welcome_sent": True,
              "prosseguir_template_sent": has_required_data,
              "workflow_completed": True
          }
      }
      
      print("=" * 60)
      print("üìä RELAT√ìRIO FINAL - QUALIFICA√á√ÉO DE LEAD")
      print("=" * 60)
      print(f"üÜî Execution ID: {report['execution_id']}")
      print(f"üë§ Lead: {report['lead_summary']['name']}")
      print(f"üì± Telefone: {report['lead_summary']['phone']}")
      print(f"üìß Email: {report['lead_summary']['email']}")
      print(f"üèôÔ∏è Cidade: {report['lead_summary']['cidade']}")
      print(f"üí° Valor Conta: {report['lead_summary']['valor_conta_luz']}")
      print(f"üìä Score: {report['lead_summary']['qualification_score']}/100")
      print(f"‚úÖ Status: {'QUALIFICADO' if report['lead_summary']['is_qualified'] else 'N√ÉO QUALIFICADO'}")
      print(f"üì± WhatsApp Enviado: {'Template Prosseguir' if report['processing_results']['prosseguir_template_sent'] else 'Apenas Boas-vindas'}")
      print("=" * 60)
      
      if report['lead_summary']['is_qualified']:
          print("üéâ LEAD QUALIFICADO COM SUCESSO!")
          print("üì± Template 'prosseguir_com_solicitacao' enviado")
      else:
          print("‚ö†Ô∏è  Lead precisa fornecer mais informa√ß√µes")
          print("üì± Apenas mensagem de boas-vindas enviada")
      
      print(f'::{{outputs: {json.dumps({"final_report": report})}}}::')

errors:
  - id: qualification-error-handler
    type: io.kestra.plugin.scripts.python.Script
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: "python:3.11-slim"
      pullPolicy: "ALWAYS"
    script: |
      import json
      from datetime import datetime
      
      print("‚ùå ERRO NO WORKFLOW DE QUALIFICA√á√ÉO")
      print(f"üÜî Execution ID: {{ execution.id }}")
      print(f"‚è∞ Timestamp: {datetime.now().isoformat()}")
      print("üìã Executando procedimento de fallback...")
      
      error_report = {
          "execution_id": "{{ execution.id }}",
          "error_timestamp": datetime.now().isoformat(),
          "workflow_stage": "unknown",
          "requires_manual_review": True
      }
      
      print("‚ö†Ô∏è  Workflow finalizado com erros - revis√£o manual necess√°ria")
      print(f'::{{outputs: {json.dumps({"error_report": error_report})}}}::') 