id: openai-hybrid-test
namespace: serena.energia
description: "Workflow Híbrido: Scripts Python com Docker + .env"

triggers:
  - id: hybrid-webhook
    type: io.kestra.plugin.core.trigger.Webhook
    key: "openai_hybrid_test"

inputs:
  - id: test_phone
    type: STRING
    defaults: "+5511999999999"
  - id: test_message
    type: STRING
    defaults: "Quero saber sobre energia solar"

tasks:
  # TESTE 1: Thread Manager
  - id: get-thread
    type: io.kestra.plugin.scripts.python.Script
    description: "Obter ou criar thread OpenAI"
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: "serena-runner:latest"
      pullPolicy: "NEVER"
      networkMode: "serena-qualifier_kestra-network"
    env:
      PHONE: "{{ inputs.test_phone }}"
    script: |
      from dotenv import load_dotenv
      load_dotenv('/app/.env')
      
      import subprocess
      import json
      import os
      
      phone = os.getenv("PHONE")
      print(f"🧵 TESTE 1: Thread Manager - Phone: {phone}")
      
      try:
          result = subprocess.run([
              'python', '/app/scripts/thread_manager.py',
              '--phone-number', phone
          ], capture_output=True, text=True, cwd='/app')
          
          print(f"Return Code: {result.returncode}")
          print(f"STDOUT: {result.stdout}")
          if result.stderr:
              print(f"STDERR: {result.stderr}")
          
          # Parse thread_id
          thread_id = None
          if result.returncode == 0:
              lines = result.stdout.strip().split('\n')
              for line in lines:
                  if line.startswith('::') and line.endswith('::'):
                      data = json.loads(line[2:-2])
                      thread_id = data.get('vars', {}).get('thread_id')
                      break
          
          if thread_id:
              print(f"✅ Thread ID obtido: {thread_id}")
          
          print('::' + json.dumps({"outputs": {"thread_id": thread_id, "success": thread_id is not None}}) + '::')
          
      except Exception as e:
          print(f"❌ Erro: {str(e)}")
          print('::' + json.dumps({"outputs": {"thread_id": None, "success": False, "error": str(e)}}) + '::')

  # TESTE 2: Adicionar Mensagem
  - id: add-message
    type: io.kestra.plugin.scripts.python.Script
    description: "Adicionar mensagem à thread"
    runIf: "{{ outputs['get-thread'].vars.success == true }}"
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: "serena-runner:latest"
      pullPolicy: "NEVER"
      networkMode: "serena-qualifier_kestra-network"
    env:
      THREAD_ID: "{{ outputs['get-thread'].vars.thread_id }}"
      MESSAGE: "{{ inputs.test_message }}"
    script: |
      from dotenv import load_dotenv
      load_dotenv('/app/.env')
      
      import subprocess
      import json
      import os
      
      thread_id = os.getenv("THREAD_ID")
      message = os.getenv("MESSAGE")
      
      print(f"💬 TESTE 2: Adicionar Mensagem")
      print(f"🧵 Thread: {thread_id}")
      print(f"📝 Mensagem: {message}")
      
      try:
          result = subprocess.run([
              'python', '/app/scripts/openai_handler.py',
              '--action', 'add_message',
              '--thread-id', thread_id,
              '--message', message
          ], capture_output=True, text=True, cwd='/app')
          
          print(f"Return Code: {result.returncode}")
          print(f"STDOUT: {result.stdout}")
          if result.stderr:
              print(f"STDERR: {result.stderr}")
          
          success = result.returncode == 0
          print(f"✅ Mensagem adicionada: {success}")
          
          print('::' + json.dumps({"outputs": {"success": success}}) + '::')
          
      except Exception as e:
          print(f"❌ Erro: {str(e)}")
          print('::' + json.dumps({"outputs": {"success": False, "error": str(e)}}) + '::')

  # TESTE 3: Criar Run
  - id: create-run
    type: io.kestra.plugin.scripts.python.Script
    description: "Criar run do Assistant"
    runIf: "{{ outputs['add-message'].vars.success == true }}"
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: "serena-runner:latest"
      pullPolicy: "NEVER"
      networkMode: "serena-qualifier_kestra-network"
    env:
      THREAD_ID: "{{ outputs['get-thread'].vars.thread_id }}"
    script: |
      from dotenv import load_dotenv
      load_dotenv('/app/.env')
      
      import subprocess
      import json
      import os
      
      thread_id = os.getenv("THREAD_ID")
      assistant_id = os.getenv("OPENAI_ASSISTANT_ID")
      
      print(f"🤖 TESTE 3: Criar Run")
      print(f"🧵 Thread: {thread_id}")
      print(f"🎭 Assistant: {assistant_id}")
      
      try:
          result = subprocess.run([
              'python', '/app/scripts/openai_handler.py',
              '--action', 'create_run',
              '--thread-id', thread_id,
              '--assistant-id', assistant_id
          ], capture_output=True, text=True, cwd='/app')
          
          print(f"Return Code: {result.returncode}")
          print(f"STDOUT: {result.stdout}")
          if result.stderr:
              print(f"STDERR: {result.stderr}")
          
          # Parse run_id
          run_id = None
          if result.returncode == 0:
              lines = result.stdout.strip().split('\n')
              for line in lines:
                  if line.startswith('::') and line.endswith('::'):
                      data = json.loads(line[2:-2])
                      run_id = data.get('vars', {}).get('run_id')
                      break
          
          if run_id:
              print(f"✅ Run ID: {run_id}")
          
          print('::' + json.dumps({"outputs": {"run_id": run_id, "success": run_id is not None}}) + '::')
          
      except Exception as e:
          print(f"❌ Erro: {str(e)}")
          print('::' + json.dumps({"outputs": {"run_id": None, "success": False, "error": str(e)}}) + '::')

  # TESTE 4: Polling Status
  - id: poll-status
    type: io.kestra.plugin.scripts.python.Script
    description: "Polling do status da run"
    runIf: "{{ outputs['create-run'].vars.success == true }}"
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: "serena-runner:latest"
      pullPolicy: "NEVER"
      networkMode: "serena-qualifier_kestra-network"
    env:
      THREAD_ID: "{{ outputs['get-thread'].vars.thread_id }}"
      RUN_ID: "{{ outputs['create-run'].vars.run_id }}"
    script: |
      from dotenv import load_dotenv
      load_dotenv('/app/.env')
      
      import subprocess
      import json
      import os
      import time
      
      thread_id = os.getenv("THREAD_ID")
      run_id = os.getenv("RUN_ID")
      
      print(f"🔄 TESTE 4: Polling Status")
      print(f"🧵 Thread: {thread_id}")
      print(f"🏃 Run: {run_id}")
      
      max_attempts = 8
      final_status = None
      
      try:
          for attempt in range(max_attempts):
              print(f"🔄 Tentativa {attempt + 1}/{max_attempts}")
              
              result = subprocess.run([
                  'python', '/app/scripts/openai_handler.py',
                  '--action', 'check_status',
                  '--thread-id', thread_id,
                  '--run-id', run_id
              ], capture_output=True, text=True, cwd='/app')
              
              if result.returncode == 0:
                  lines = result.stdout.strip().split('\n')
                  for line in lines:
                      if line.startswith('::') and line.endswith('::'):
                          data = json.loads(line[2:-2])
                          status = data.get('vars', {}).get('status')
                          print(f"📊 Status: {status}")
                          
                          if status in ['completed', 'failed', 'cancelled', 'expired', 'requires_action']:
                              final_status = status
                              print(f"✅ Status final: {status}")
                              break
                  
                  if final_status:
                      break
              
              if attempt < max_attempts - 1:
                  time.sleep(3)
          
          print('::' + json.dumps({"outputs": {"final_status": final_status, "attempts": attempt + 1}}) + '::')
          
      except Exception as e:
          print(f"❌ Erro: {str(e)}")
          print('::' + json.dumps({"outputs": {"final_status": "error", "error": str(e)}}) + '::')

  # TESTE 5: Obter Resposta
  - id: get-response
    type: io.kestra.plugin.scripts.python.Script
    description: "Obter resposta final"
    runIf: "{{ outputs['poll-status'].vars.final_status == 'completed' }}"
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
      image: "serena-runner:latest"
      pullPolicy: "NEVER"
      networkMode: "serena-qualifier_kestra-network"
    env:
      THREAD_ID: "{{ outputs['get-thread'].vars.thread_id }}"
    script: |
      from dotenv import load_dotenv
      load_dotenv('/app/.env')
      
      import subprocess
      import json
      import os
      
      thread_id = os.getenv("THREAD_ID")
      
      print(f"📥 TESTE 5: Obter Resposta")
      print(f"🧵 Thread: {thread_id}")
      
      try:
          result = subprocess.run([
              'python', '/app/scripts/openai_handler.py',
              '--action', 'get_response',
              '--thread-id', thread_id
          ], capture_output=True, text=True, cwd='/app')
          
          print(f"Return Code: {result.returncode}")
          print(f"STDOUT: {result.stdout}")
          if result.stderr:
              print(f"STDERR: {result.stderr}")
          
          # Parse response
          response_text = None
          if result.returncode == 0:
              lines = result.stdout.strip().split('\n')
              for line in lines:
                  if line.startswith('::') and line.endswith('::'):
                      data = json.loads(line[2:-2])
                      response_text = data.get('vars', {}).get('response')
                      break
          
          if response_text:
              print(f"🤖 RESPOSTA: {response_text[:200]}...")
          
          print('::' + json.dumps({"outputs": {"response": response_text, "success": response_text is not None}}) + '::')
          
      except Exception as e:
          print(f"❌ Erro: {str(e)}")
          print('::' + json.dumps({"outputs": {"response": None, "success": False, "error": str(e)}}) + '::')

outputs:
  - id: test_summary
    type: JSON
    value: |
      {
        "thread_manager": {{ outputs['get-thread'].vars.success | default(false) }},
        "thread_id": "{{ outputs['get-thread'].vars.thread_id }}",
        "message_added": {{ outputs['add-message'].vars.success | default(false) }},
        "run_created": {{ outputs['create-run'].vars.success | default(false) }},
        "run_id": "{{ outputs['create-run'].vars.run_id }}",
        "final_status": "{{ outputs['poll-status'].vars.final_status }}",
        "response_obtained": {{ outputs['get-response'].vars.success | default(false) }},
        "assistant_response": "{{ outputs['get-response'].vars.response }}",
        "overall_success": {{ (outputs['get-response'].vars.success == true) | default(false) }}
      }
  
  - id: success
    type: BOOLEAN
    value: "{{ outputs['get-response'].vars.success == true }}" 